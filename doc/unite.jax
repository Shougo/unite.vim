*unite.txt*	すべてのsourceを統合する

Version: 2.0
Author : Shougo <Shougo.Matsu@gmail.com>
Japanese Documentation Author: naoina
License: MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

目次						*unite-contents*

概要			|unite-introduction|
使い方			|unite-usage|
インストール		|unite-install|
インターフェース	|unite-interface|
  コマンド		  |unite-commands|
  変数			  |unite-variables|
    sourceの変数	    |unite-sources-variables|
  キーマッピング	  |unite-key-mappings|
  関数			  |unite-functions|
  source		  |unite-sources|
  kind			  |unite-kinds|
  アクション		  |unite-actions|
  filter		  |unite-filters|
設定例			|unite-examples|
sourceの作成		|unite-create-source|
kindの作成		|unite-create-kind|
filterの作成		|unite-create-filter|
ユーザーのsource	|unite-user-sources|
ToDo			|unite-todo|
既知のバグ			|unite-bugs|
更新履歴		|unite-changelog|

==============================================================================
概要						*unite-introduction*

*unite* (または *unite.vim* ) はファイル、バッファ、最近使用したファイル、レジスタといった、任意の情
報源からの検索、表示を行う。表示された候補に対して、候補のkindごとに定義された
アクションを実行することができる。

似たプラグインとして、|fuzzyfinder|や|ku|があるが、|unite| はVimの補完インタフ
ェースを使用しないということ、sourceの統合を行うことが違いとして挙げられる。

==============================================================================
使い方						*unite-usage*

	sourceとしてファイル及び、バッファを指定して起動する場合
>
	:Unite file buffer
<

	絞込みテキストとしてhogeを入力した状態で起動する場合
>
	:Unite -input=hoge file
<

uniteを起動すると、デフォルトの状態ではウィンドウが水平に分割され、デフォルトで
は上側にuniteのバッファが開かれる。例えば
>
	:Unite file
<
として起動した場合、カレントディレクトリのファイルの一覧が表示されているはずで
ある。その状態で j、k、で候補を選択できるので、適当に候補を選び、Enter を押せ
ば選択した候補が新しいバッファで開かれる。これは選択した候補のkindがファイルで
あった場合の、デフォルトのアクションである。候補を選択して <Tab> を押下すると
候補に対するアクションが選択できる。アクションについては|unite-action|を参照。

候補が多い場合などはキーワードによって絞り込むことができる。前回と同じように
起動した後に、i を押下するとカーソルが2行目の > の右側に移る。これで絞込みテ
キストが入力できる。この状態で文字を入力すると、1文字入力するごとに候補が絞り
込まれていく。また * (ワイルドカード)を入力すると任意の文字で絞り込むことがで
きる。例えば
>
	*hoge
<
上記は hoge、ahoge、foohoge などにマッチする。また、ワイルドカードを2つ続けて
入力すると、ディレクトリを再帰的に指定できる。例えば
>
	**/foo
<
上記は hoge/foo、hoge/fuga/foo などにマッチする。ただし上記コマンドは実際には
後述する|unite-source-file_rec|を用いた方が良い。

絞り込み文字列はスペース区切りで複数指定できる。例えば
>
	hoge piyo
<
上記は hogeにマッチかつ、piyoにマッチする候補にマッチする。

除外パターンを!で記述できる。例えば
>
	hoge !piyo
<
上記は hogeにマッチするが、piyoにマッチする候補は除外される。

	-buffer-nameオプションにfilesを設定すると、/区切りでワイルドカードが自
	動的に付加される。これはファイルをuniteで選択する際に便利である。
>
	:Unite -buffer-name=files file
<
その他の操作については|unite_default_key_mappings|を参照。

参考：ujihisa氏の作成したScreencast
http://www.ustream.tv/recorded/11240673

==============================================================================
インストール					*unite-install*

配布ファイルをVimスクリプトのディレクトリへインストールする。
(普通は ~/.vim/ またはWindowsの場合、 $HOME/vimfiles)

インストールに成功すると、sourceを引数に指定して、|:Unite|コマンドでuniteを実
行することができる。しかしながら毎回このコマンドを実行するのは非常に手間である
ため、何かしらのキーマッピングを定義すると良いだろう。

==============================================================================
インターフェース				*unite-interface*

------------------------------------------------------------------------------
コマンド 					*unite-commands*

:Unite [{options}] {sources}			*:Unite*
		{sources} で指定したsourceでの候補ウィンドウを表示する。初期の
		絞込みテキストは空。{sources} はスペースで区切って複数指定でき
		る。また、{sources} の指定順序がsourceの候補の表示順序となる。
		sourceについては|unite-source|を参照。

		現在uniteバッファに居る場合、絞り込みテキストは保存される。

		source名の後ろに:で区切った文字列のリストを引数として渡すことが
		できる。引数に含まれる:と\は\でエスケープしなければならない。引
		数がどう解釈されるかは、sourceによって異なる。

		例：
		"file:hoge:piyo": source fileに与える引数は[hoge, piyo]である。
		"file:hoge\:piyo": source fileに与える引数は[hoge:piyo]である。

						*unite-options*
		{options}とはuniteバッファに与えるオプションである。
		オプションは、次のパラメータを取る。値にスペースが含まれるとき
		は、\でエスケープしなければならない。

						*unite-options-buffer-name*
		-buffer-name={buffer-name}
		uniteのバッファ名を指定する。同じ目的を持つuniteバッファに同じ
		バッファ名を付けることで、|unite#set_substitute_pattern()|など
		の設定を共通化することができる。指定しないと、'default'が使われ
		る。

						*unite-options-input*
		-input={input-text}
		初期の絞込みテキストを指定する。指定しないと、''が使われる。

						*unite-options-prompt*
		-prompt={prompt-text}
		プロンプトを指定する。指定しないと、'>'が使われる。

						*unite-options-default-action*
		-default-action={default-action}
		デフォルトアクションを指定する。指定しないと、'default'が使われ
		る。

						*unite-options-start-insert*
						*unite-options-no-start-insert*
		-start-insert
		初期状態が絞り込みモードになる。

		-no-start-insert
		初期状態がNormal modeになる。

		両方のオプションを指定しないと、初期状態は
		|g:unite_enable_start_insert|に依存する。
		両方のオプションが指定されたときの動作は未定義である。

						*unite-options-no-quit*
		-no-quit
		アクションを実行しても、uniteバッファを閉じない。指定しないと、
		"is_quit"なアクションを実行するとuniteバッファは閉じられる。

						*unite-options-winwidth*
		-winwidth={window-width}
		uniteバッファの幅を指定する。指定しないと、|g:unite_winwidth|が
		使われる。

						*unite-options-winheight*
		-winheight={window-height}
		uniteバッファの高さを指定する。指定しないと、
		|g:unite_winheight|が使われる。

						*unite-options-immediately*
		-immediately
		候補が一つしかないとき、即座にアクションを実行する。候補がな
		いときにはuniteバッファを開かない。

						*unite-options-auto-preview*
		-auto-preview
		候補を選択した際、自動的に"preview"アクションを実行する。

						*unite-options-completion*
		-completion
		uniteの補完インタフェースを使用する。|unite-options-col|を同
		時に設定しなければならない。

						*unite-options-col*
		-col={column-number}
		uniteを開始した位置を指定する。

						*unite-options-vertical*
		-vertical
		uniteバッファを垂直分割する。

						*unite-options-horizontal*
		-horizontal
		uniteバッファを水平分割する。
		
		両方のオプションを指定しないと、初期状態は
		|g:unite_enable_split_vertically|に依存する。両方のオプションが
		指定されたときの動作は未定義である。

						*unite-options-direction*
		-direction={direction}
		uniteバッファの分割方法を指定する。デフォルト値は
		|g:unite_split_rule|と同じである。

						*unite-options-verbose*
		-verbose
		冗長な警告メッセージを出すようにする。

:UniteWithCurrentDir [{options}] {sources}	*:UniteWithCurrentDir*
		初期の絞込みテキストが現在のディレクトリである他は|:Unite|と同
		一である。

:UniteWithBufferDir [{options}] {sources}	*:UniteWithBufferDir*
		初期の絞込みテキストが現在のバッファのディレクトリである他は
		|:Unite|と同一である。

:UniteWithCursorWord [{options}] {sources}	*:UniteWithCursorWord*
		初期の絞込みテキストが現在のカーソル位置文字列である他は
		|:Unite|と同一である。

:UniteWithInput [{options}] {sources}		*:UniteWithInput*
		初期の絞込みテキストをユーザーが入力する他は|:Unite|と同一であ
		る。

:UniteWithInputDirectory [{options}] {sources}	
						*:UniteWithInputDirectory*
		|:UniteWithInput|と同じであるが、入力する文字列はデイレクトリと
		みなされ、自動的に変換される。

:UniteResume [{buffer-name}]			*:UniteResume*
		以前開いた{buffer-name}という名前のuniteバッファを再利用する。
		{buffer-name}を省略すると、以前使用したバッファを再利用する。
		絞込みテキストや候補はそのままの状態となる。

sourceのコマンド				*unite-sources-commands*

:UniteBookmarkAdd [{file}]			*:UniteBookmarkAdd*
		ブックマークリストにファイルを追加する。引数が指定されなかった
		場合、現在のファイルの現在位置が記録される。

------------------------------------------------------------------------------
変数						*unite-variables*

g:unite_update_time				*g:unite_update_time*
		絞込みテキストを入力するごとに表示される候補の更新間隔を制御す
		る。単位はミリ秒。
		
		初期値は200である。

g:unite_enable_start_insert			*g:unite_enable_start_insert*
		uniteを実行したあとすぐに、絞込みテキストの入力モードにするかを
		制御する。1ならば有効になる。
		
		初期値は0である。

g:unite_split_rule				*g:unite_split_rule*
		uniteのウィンドウを生成する際、画面分割の位置ルールを指定する。
		
		初期値は"topleft"である。

g:unite_enable_split_vertically			*g:unite_enable_split_vertically*
		uniteのウィンドウを垂直分割にするかどうかを制御する。1ならば垂
		直分割にする。
		
		初期値は0なので、水平分割である。

g:unite_winheight				*g:unite_winheight*
		uniteのウィンドウが水平分割されたときの高さを指定する。垂直分割
		の場合は無視される。
		
		初期値は20である。

g:unite_winwidth				*g:unite_winwidth*
		uniteのウィンドウが垂直分割されたときの幅を指定する。水平分割の
		場合は無視される。
		
		初期値は90である。

g:unite_cd_command				*g:unite_cd_command*
		cdアクションで実行されるVimのコマンドを指定する。
		|`=|を解釈するコマンドでなければならない。
		
		初期値は"cd"である。

g:unite_lcd_command				*g:unite_lcd_command*
		lcdアクションで実行されるVimのコマンドを指定する。
		|`=|を解釈するコマンドでなければならない。
		
		初期値は"lcd"である。

g:unite_cursor_line_highlight			*g:unite_cursor_line_highlight*
		カーソル行のハイライトを指定する。
		
		初期値は"PmenuSel"である。

g:unite_abbr_highlight				*g:unite_abbr_highlight*
		候補の短縮文字列のハイライトを指定する。
		
		初期値は"Pmenu"である。

g:unite_quick_match_table			*g:unite_quick_match_table*
		入力文字と対応する、クイックマッチリストの補完候補のテーブルで
		ある。
		
		初期値は複雑なので、plugin/unite.vimを参照せよ。

g:unite_data_directory				*g:unite_data_directory*
		uniteやそのsourceが内部で使用する設定ファイルを書き出すディレク
		トリを指定する。ここで指定したディレクトリが実際に存在しない場
		合、自動的に作成される。例えばfile_mruのsourceは最近使用したフ
		ァイルの情報をこの下に保存する。
		
		初期値は'~/.unite'の絶対パスである。

g:unite_no_default_keymappings			*g:unite_no_default_keymappings*
		この変数の値を1にすれば、uniteが予め用意しているキーマッピング
		を設定しない。混乱するので、特に理由がない限り、通常は有効にす
		べきではない。
		
		この変数はユーザーが自分で定義しない限り存在しない。

sourceの変数					*unite-sources-variables*

g:unite_source_file_ignore_pattern		*g:unite_source_file_ignore_pattern*
		|unite-source-file|の候補に表示しないファイルの正規表現パター
		ンを指定する。マッチングはファイルのフルパスに対して行われる。
		この変数が空文字列以外であれば、指定した正規表現で結果をフィル
		タリングする。

		初期値は autoload/unite/sources/file.vim を参照。

g:unite_source_file_mru_time_format		*g:unite_source_file_mru_time_format*
		|unite-source-file_mru|の最終アクセス時間の表示フォーマット
		を指定する。フォーマットは|strftime()|で指定できるものと同じ
		である。
		
		初期値は"(%c) "である。

g:unite_source_file_mru_filename_format		*g:unite_source_file_mru_filename_format*
		|unite-source-file_mru|のファイル名の表示フォーマットを指定
		する。フォーマットは|fnamemodify()|で指定できるものと同じで
		ある。もしこの変数の値が空だと、表示スピードが高速化される。

		初期値は":~:."である。

g:unite_source_file_mru_file			*g:unite_source_file_mru_file*
		最近使用したファイルの情報を書き出すファイルを指定する。
		
		初期値は |g:unite_data_directory| . '/.file_mru' である。

g:unite_source_file_mru_limit			*g:unite_source_file_mru_limit*
		最近使用したファイルの最大保存件数を指定する。
		
		初期値は100である。

g:unite_source_file_mru_ignore_pattern		*g:unite_source_file_mru_ignore_pattern*
		|unite-source-file_mru|の候補に表示しないファイルの正規表現
		パターンを指定する。マッチングはファイルのフルパスに対して行
		われる。この変数が空文字列以外であれば、指定した正規表現で結
		果をフィルタリングする。正規表現の大文字・小文字は明確に区別さ
		れる。
		
		初期値は autoload/unite/sources/file_mru.vim を参照。

g:unite_source_directory_mru_time_format	*g:unite_source_directory_mru_time_format*
g:unite_source_directory_mru_directory		*g:unite_source_directory_mru_directory*
g:unite_source_directory_mru_limit		*g:unite_source_directory_mru_limit*
g:unite_source_directory_mru_ignore_pattern	*g:unite_source_directory_mru_ignore_pattern*
		これらは対象が|unite-source-directory_mru|であること以外は
		|unite-source-file_mru|の各変数と同じ仕様である。

g:unite_source_bookmark_file			*g:unite_source_bookmark_file*
		|unite-source-bookmark|がブックマークを書き出すファイルを指
		定する。
		
		初期値は |g:unite_data_directory| . '/.bookmark' である。

g:unite_source_file_rec_ignore_pattern		*g:unite_source_file_rec_ignore_pattern*
		|unite-source-file_rec|の候補に表示しないファイルの正規表現
		パターンを指定する。マッチングはファイルのフルパスに対して行
		われる。この変数が空文字列以外であれば、指定した正規表現で結
		果をフィルタリングする。正規表現の大文字・小文字は明確に区別さ
		れる。
		
		初期値は autoload/unite/sources/file_rec.vim を参照。

g:unite_source_file_rec_min_cache_files		*g:unite_source_file_rec_min_cache_files*
		|unite-source-file_rec|が内部でキャッシュする最小のファイル
		数を指定する。ディレクトリ中のファイル数が、ここで指定したファ
		イル数よりも小さい場合はキャッシュされない。

		初期値は50である。

g:unite_source_grep_command			*g:unite_source_grep_command*
		"grep"コマンドを指定する。

		初期値は"grep"である。

g:unite_source_grep_recursive_opt		*g:unite_source_grep_recursive_opt*
		"grep"の再帰検索オプションを指定する。

		初期値は"-R"である。

g:unite_source_grep_default_opts		*g:unite_source_grep_default_opts*
		"grep"に与えるデフォルトのオプションを指定する。
		Note: "grep"の出力は下記のパターンに一致しなければならない。
		filename:number:pattern

		初期値は"-Hn"である。

g:unite_source_grep_max_candidates		*g:unite_source_grep_max_candidates*
		|unite-source-grep|の候補の最大数を指定する。

		初期値は100である。

g:unite_source_line_enable_highlight		*g:unite_source_line_enable_highlight*
		検索キーワードをハイライトするか制御する。

		Default value is 1.

g:unite_source_line_search_word_highlight	*g:unite_source_line_search_word_highlight*
		|g:unite_source_line_enable_highlight|が真のとき、検索文字
		列のハイライトを設定する。

		初期値は"Search"である。

kindの変数					*unite-kinds-variables*

g:unite_kind_jump_list_after_jump_scroll	*g:unite_kind_jump_list_after_jump_scroll*
		|unite-kind-jump_list|において、ジャンプ後のカーソルの位置（ス
		クロール）を調整するための数値。最小値は 0 でウィンドウ最上を
		意味し、最大値は 100 でウィンドウ最下を意味する。

		数値	意味		同等のコマンド
		--------------------------------------
		0	ウィンドウ最上	normal! |z<CR>|
		50	ウィンドウ中央	normal! |z.|
		100	ウィンドウ最下	normal! |z-|

		初期値は25である。

g:unite_kind_openable_persist_open_blink_time	*g:unite_kind_openable_persist_open_blink_time*
		|unite-kind-openable|において、"persist_open"後にカーソル行
		を点滅させる時間。

		初期値は"250m"である。

------------------------------------------------------------------------------
キーマッピング 					*unite-key-mappings*

ノーマルモードマッピング

<Plug>(unite_exit)				*<Plug>(unite_exit)*
		uniteを終了する。

<Plug>(unite_restart)				*<Plug>(unite_restart)*
		unitを再起動する。

<Plug>(unite_do_default_action)			*<Plug>(unite_do_default_action)*
		選択している候補に対してデフォルトのアクションを実行する。アク
		ションは候補のkindごとに定義されている。kindについては
		|unite-kind|を参照。デフォルトのアクションについては
		|unite-default-action|を参照。

<Plug>(unite_choose_action)			*<Plug>(unite_choose_action)*
		uniteインタフェースにより、選択している候補に対して実行するアク
		ションを選択する。アクションは候補のkindごとに定義されている。
		複数の候補が選択されている場合は共通なアクションのみ選択ができ
		る。kindについては|unite-kind|を参照。

<Plug>(unite_insert_enter)			*<Plug>(unite_insert_enter)*
		カーソル位置から絞込みテキスト入力を開始する。ただし、カーソル
		がプロンプト行にいない場合、カーソルが自動的にプロンプト行へと
		移動する。

<Plug>(unite_insert_head)			*<Plug>(unite_insert_head)*
		カーソルを先頭に移動して絞込みテキスト入力を開始する。ただし、
		カーソルがプロンプト行にいない場合、カーソルが自動的にプロンプ
		ト行へと移動する。

<Plug>(unite_append_enter)			*<Plug>(unite_append_enter)*
		カーソルの右側から絞込みテキスト入力を開始する。ただし、カー
		ソルがプロンプト行にいない場合、カーソルが自動的にプロンプト行
		へと移動する。

<Plug>(unite_append_end)			*<Plug>(unite_append_end)*
		カーソルを行末に移動して絞込みテキストの入力を開始する。ただ
		し、カーソルがプロンプト行にいない場合、カーソルが自動的にプロ
		ンプト行へと移動する。

<Plug>(unite_toggle_mark_current_candidate)	*<Plug>(unite_toggle_mark_current_candidate)*
		カレント行の候補のマークを反転させる。複数の候補をマークすれば、
		複数の候補に対して一気にアクションを実行することができる。

<Plug>(unite_toggle_mark_all_candidates)	*<Plug>(unite_toggle_mark_all_candidates)*
		全ての候補のマークを反転させる。

<Plug>(unite_redraw)				*<Plug>(unite_redraw)*
		|g:unite_update_time|で制御される更新間隔を待たずに、すぐに表
		示を更新する。uniteのキャッシュ更新に使われる。

<Plug>(unite_rotate_next_source)		*<Plug>(unite_rotate_next_source)*
		sourceの順番を順方向に並び変える。

<Plug>(unite_rotate_previous_source)		*<Plug>(unite_rotate_previous_source)*
		sourceの順番を逆方向に並び変える。

<Plug>(unite_print_candidate)			*<Plug>(unite_print_candidate)*
		選択している候補に対するアクションの対象を表示する。例えば、選
		択している候補のkindが|word|の場合は、対象の内容が表示される。

<Plug>(unite_cursor_top)			*<Plug>(unite_cursor_top)*
		uniteバッファの一番上へ移動する。

<Plug>(unite_loop_cursor_down)			*<Plug>(unite_loop_cursor_down)*
		次の行に移動。ただしバッファの最後にいる場合はループする。

<Plug>(unite_loop_cursor_up)			*<Plug>(unite_loop_cursor_up)*
		前の行に移動。ただしバッファの一番上にいる場合はループする。

<Plug>(unite_quick_match_default_action)	*<Plug>(unite_quick_match_default_action)*
		クイックマッチを行い、選択した候補のデフォルトアクションを実行
		する。マークしている候補がある場合は無効となる。

<Plug>(unite_input_directory)			*<Plug>(unite_input_directory)*
		ディレクトリ名を入力して絞り込みを行う。

<Plug>(unite_delete_backward_path)		*<Plug>(unite_delete_backward_path)*
		一つ上のパスまで削除する。
		|i_<Plug>(unite_delete_backward_path)|を参照せよ。

<Plug>(unite_toggle_transpose_window)		*<Plug>(unite_toggle_transpose_window)*
		uniteバッファの分割方向を変更する。

<Plug>(unite_narrowing_path)			*<Plug>(unite_narrowing_path)*
		候補のパスもしくはwordにより絞り込みを行う。

インサートモードマッピング

<Plug>(unite_exit)				*i_<Plug>(unite_exit)*
		uniteを終了する。

<Plug>(unite_insert_leave)			*i_<Plug>(unite_insert_leave)*
		ノーマルモードに移行する。

<Plug>(unite_delete_backward_char)		*i_<Plug>(unite_delete_backward_char)*
		カーソル直前の1文字を消す。文字が入力されていない場合はuniteを
		終了する。

<Plug>(unite_delete_backward_line)		*i_<Plug>(unite_delete_backward_line)*
		カーソルから行の先頭までの文字をすべて削除する。

<Plug>(unite_delete_backward_word)		*i_<Plug>(unite_delete_backward_word)*
		カーソル直前の単語を削除する。

<Plug>(unite_delete_backward_path)		*i_<Plug>(unite_delete_backward_path)*
		一つ上のパスまで削除する。たとえば >
		/home/Shougo/Desktop
<		や >
		/home/Shougo/Desktop/
<		の時に<Plug>(unite_delete_backward_path)すると >
		/home/Shougo
<		になる。ファイルパスを操作する際に有効。

<Plug>(unite_select_next_line)			*i_<Plug>(unite_select_next_line)*
		次の候補に移動。ただし候補の最後にいる場合はループする。

<Plug>(unite_select_previous_line)		*i_<Plug>(unite_select_previous_line)*
		前の候補に移動。ただし候補の先頭にいる場合はループする。

<Plug>(unite_select_next_page)			*i_<Plug>(unite_select_next_page)*
		次の候補ページを表示。

<Plug>(unite_select_previous_page)		*i_<Plug>(unite_select_previous_page)*
		前の候補ページを表示。

<Plug>(unite_do_default_action)			*i_<Plug>(unite_do_default_action)*
		|<Plug>(unite_do_default_action)|と同じ。

<Plug>(unite_toggle_mark_current_candidate)	*i_<Plug>(unite_toggle_mark_current_candidate)*
		|<Plug>(unite_toggle_mark_current_candidate)|と同じ。

<Plug>(unite_choose_action)			*i_<Plug>(unite_choose_action)*
		|<Plug>(unite_choose_action)|と同じ。

<Plug>(unite_move_head)				*i_<Plug>(unite_move_head)*
		カーソルを行の先頭に移動する。

<Plug>(unite_quick_match_default_action)	*i_<Plug>(unite_quick_match_default_action)*
		|<Plug>(unite_quick_match_default_action)|と同じ。

<Plug>(unite_input_directory)			*i_<Plug>(unite_input_directory)*
		|<Plug>(unite_input_directory)|と同じ。

<Plug>(unite_toggle_transpose_window)		*i_<Plug>(unite_toggle_transpose_window)*
		|<Plug>(unite_toggle_transpose_window)|と同じ。

<Plug>(unite_narrowing_path)			*i_<Plug>(unite_narrowing_path)*
		|<Plug>(unite_narrowing_path)|と同じ。

ビジュアルモードマッピング

<Plug>(unite_toggle_mark_selected_candidates)	*v_<Plug>(unite_toggle_selected_candidates)*
		ビジュアル選択している候補に対して、マークのオンオフを切り替え
		る。

						*unite_default_key_mappings*
デフォルトキーマッピング

ノーマルモードマッピング
{lhs}		{rhs}
--------	-----------------------------
i		|<Plug>(unite_insert_enter)|
I		|<Plug>(unite_insert_head)|
a		|<Plug>(unite_append_enter)|
A		|<Plug>(unite_append_end)|
q		|<Plug>(unite_exit)|
<C-r>		|<Plug>(unite_restart)|
<Space>		|<Plug>(unite_toggle_mark_current_candidate)|
*		|<Plug>(unite_toggle_mark_all_candidates)|
<Tab>		|<Plug>(unite_choose_action)|
<C-n>		|<Plug>(unite_rotate_next_source)|
<C-p>		|<Plug>(unite_rotate_previous_source)|
<C-g>		|<Plug>(unite_print_candidate)|
<C-l>		|<Plug>(unite_redraw)|
<C-h>		|<Plug>(unite_delete_backward_path)|
gg		|<Plug>(unite_cursor_top)|
j		|<Plug>(unite_loop_cursor_down)|
<Down>		|<Plug>(unite_loop_cursor_down)|
k		|<Plug>(unite_loop_cursor_up)|
<Up>		|<Plug>(unite_loop_cursor_up)|
<CR>		候補を選択している場合は default アクションの実行
d		候補を選択している場合は delete アクションの実行
b		候補を選択している場合は bookmark アクションの実行
e		候補を選択している場合は edit アクションの実行
p		preview アクションの実行
x		候補を選択している場合は|<Plug>(unite_quick_match_default_action)|

インサートモードマッピング
{lhs}		{rhs}
--------	-----------------------------
<Tab>		|i_<Plug>(unite_choose_action)|
<C-n>		|i_<Plug>(unite_select_next_line)|
<Down>		|i_<Plug>(unite_select_next_line)|
<C-p>		|i_<Plug>(unite_select_previous_line)|
<Up>		|i_<Plug>(unite_select_previous_line)|
<C-f>		|i_<Plug>(unite_select_next_page)|
<C-b>		|i_<Plug>(unite_select_previous_page)|
<CR>		|i_<Plug>(unite_do_default_action)|
<C-h>		|i_<Plug>(unite_delete_backward_char)|
<BS>		|i_<Plug>(unite_delete_backward_char)|
<C-u>		|i_<Plug>(unite_delete_backward_line)|
<C-w>		|i_<Plug>(unite_delete_backward_word)|
<C-a>		|i_<Plug>(unite_move_head)|
<Home>		|i_<Plug>(unite_move_head)|
e		候補を選択している場合は edit アクションの実行
d		候補を選択している場合は delete アクションの実行
<Space>		候補を選択している場合は|i_<Plug>(unite_toggle_mark_current_candidate)|
x		候補を選択している場合は|i_<Plug>(unite_quick_match_default_action)|

ビジュアルモードマッピング
{lhs}		{rhs}
--------	-----------------------------
<Space>		|v_<Plug>(unite_toggle_mark_selected_candidates)|

==============================================================================
関数						*unite-functions*

CORE						*unite-functions-core*

unite#get_kinds([{kind-name}])			*unite#get_kinds()*
			{kind-name}に指定されたkindを取得する。kindが存在しな
			い場合は空のディクショナリを返す。{kind-name}を省略し
			た場合、キーがkind名、値がそれぞれのkindとしたディク
			ショナリを返す。

			この戻り値を変更してはいけない。

unite#get_sources([{source-name}])		*unite#get_sources()*
			{source-name}に指定されたsourceを取得する。sourceが存
			在しない場合は空のディクショナリを返す。{source-name}
			を省略した場合、キーがsource名、値がそれぞれのsourceと
			したディクショナリを返す。

			この戻り値を変更してはいけない。

CUSTOMS						*unite-functions-customs*

unite#start({sources}, [, {context}])				*unite#start()*
		uniteバッファを新しく生成する。現在uniteバッファに居る場合、絞
		り込みテキストは保存される。

		{sources}はリストであり、それぞれ
		の要素は{source-name}または、[{source-name}, {args},...]とい
		う形式である。{args}には{source-name}に渡す引数を文字列形式で
		複数指定できる。

		{context}については、 |unite-notation-{context}|
		を参照せよ。値を省略すると、デフォルト値が使用される。

unite#get_context()						*unite#get_context()*
		現在のuniteバッファのコンテキスト情報を得る。
		|unite#custom_action()|などで、|unite#start()|を内部で呼び出す
		際に使用する。

unite#do_action({action-name})					*unite#do_action()*
		マークしている候補に対して{action-name}アクションを実行す
		るためのキーシーケンスを返す。この関数はuniteが起動している時に
		のみ動作する。{action-name}が存在しない、もしくは不正な実行だっ
		た場合は実行時エラーとなる。

		ユーザー側で特定のアクションを実行するためのマッピングを定義す
		る場合に便利である。

		{action-name}に"default"を指定すると、デフォルトのアクションが
		実行される。

		候補がマークされていない場合は、現在の行もしくは、一番上の候補
		に対してアクションを実行することになる。

		inoremap <buffer><expr>やnnoremap <buffer><expr>で通常用いる。
		例:
>
		nnoremap <silent><buffer><expr> <C-k> unite#do_action('preview')
>
unite#smart_map({narrow-map}, {select-map})			*unite#smart_map()*
		絞り込み時と選択時のマッピングを設定し、文脈によって切り換える
		キーシーケンスを返す。|unite#do_action()|と組み合わせて使用する
		と良い。

		inoremap <buffer><expr>やnnoremap <buffer><expr>で通常用いる。
		例:
>
		inoremap <buffer><expr> ' unite#smart_map("'", unite#do_action('preview'))
<
unite#set_substitute_pattern({buffer-name}, {pattern}, {subst} [, {priority}])
						*unite#set_substitute_pattern()*
		uniteのバッファ名{buffer-name}における絞込みテキストの置換パタ
		ーンを指定する。{buffer-name}を""とすると、"default"となり、
		|:Unite|で-buffer-name=を省略したときに使われるbuffer-nameと同
		じになる。{buffer-name}は","区切りで複数指定ができる。
		{pattern}は置換対象の正規表現、{subst}は置換する文字列である。
		同じ{pattern}を複数回指定すると、設定は上書きされる。
		{subst}を""とすると、{pattern}は無効化される。{priority}とは置
		換処理の優先度である。{pattern}は{priority}でソートされた上で、
		{priority}が大きい順に適用される。{priority}を省略すると0にな
		る。先に処理されるべき{pattern}は{priority}を大きくすると良い。
		ちなみに、uniteバッファの初期文字列は置換の対象とならない。
		
		この関数を使うと、曖昧マッチを模倣することができる。
>
		call unite#set_substitute_pattern('files', '[[:alnum:]]', '*\0', 100)
		call unite#set_substitute_pattern('files', '[[:alnum:]]', ' \0', 100)
<
		上の設定は/を越えずに曖昧検索をするが、下の場合は/を越えて曖昧
		検索することができる。
		
		初期値は次のように設定されていて、buffer_nameがfilesのバッファ
		において、~を$HOME、/は部分マッチできるように、ワイルドカードを
		付加するようになっている。
>
		call unite#set_substitute_pattern('files', '^\~',
		\ substitute(unite#util#substitute_path_separator($HOME), ' ', '\\\\ ', 'g'), -100)
		call unite#set_substitute_pattern('files', '[^~.*]\ze/', '\0*', 100)
		call unite#set_substitute_pattern('files', '/\ze[^~.*]', '/*', 100)
<
unite#get_substitute_pattern({buffer-name})
						*unite#get_substitute_pattern()*
		uniteのバッファ名{buffer-name}における絞込みテキストの置換パタ
		ーンを取得する。{buffer-name}に置換パターンが定義されていない
		と、エラーになる。デバッグ用である。

unite#set_buffer_name_option({buffer-name}, {option-name}, {value})
						*unite#set_buffer_name_option()*
		uniteのバッファ名{buffer-name}における{option-name}のオプショ
		ンを{value}に設定する。
		
		現在、次のオプション名が有効である。
		
		substitute_patterns		(辞書)
		置換文字列のパターンを指定する。辞書のkeyは"pattern",
		"subst", "priority"である。詳しい仕様は
		|unite#set_substitute_pattern()|を参照せよ。
		
		filters				(リスト)
		filter名のリストを指定する。ここで指定したfilterは、source毎
		に呼び出される普通のfilterとは異なり、全候補を結合した後に呼
		び出される。
		
		ignorecase			(数値)
		uniteバッファで一時的にセットされる'ignorecase'オプションの値を
		決定する。省略すると、'ignorecase'の値と同じになる。
		
		smartcase			(数値)
		大文字が入力されているときに、'ignorecase'オプションの値を無視
		するかどうか決定する。省略すると、'smartcase'の値と同じになる。

unite#custom_default_action({kind}, {default-action})
						*unite#custom_default_action()*
		{kind}に対するデフォルトアクションを{default-action}に置き換え
		る。{kind}は","区切りで複数指定ができる。
		例:
>
		call unite#custom_default_action('file', 'tabopen')
<
unite#custom_action({kind}, {name}, {action})
						*unite#custom_action()*
		{kind}に対し、{name}という名前の{action}を付け加える。
		{kind}は","区切りで複数指定ができる。
		例:
>
		let my_tabopen = {
		\ 'is_selectable' : 1,
		\ }
		function! my_tabopen.func(candidates)
		  call unite#take_action('tabopen', a:candidates)
		
		  let l:dir = isdirectory(a:candidate.word) ? a:candidate.word : fnamemodify(a:candidate.word, ':p:h')
		  execute g:unite_lcd_command '`=l:dir`'
		endfunction
		call unite#custom_action('file,buffer', 'tabopen', my_tabopen)
		unlet my_tabopen
<
unite#undef_custom_action({kind}, {name})			*unite#undef_custom_action()*
		|unite#custom_action()|で追加した、{kind}の{name}というactionを削
		除する。{kind}は","区切りで複数指定ができる。
		存在しないときは無視される。

unite#custom_alias({kind}, {name}, {action})
						*unite#custom_alias()*
		{kind}に対する{action}の別名である、{name}というアクションを定
		義する。アクションに短縮名を付けたい場合に便利。
		{kind}は","区切りで複数指定ができる。
		{action}を"nop"とすると、そのアクションは無効化される。
		例:
>
		call unite#custom_alias('file', 'h', 'left')
<
unite#custom_filters({source-name}, {filters})	*unite#custom_filters()*
		{source-name}のfilterを{filters}に変更する。
		{source-name}は","区切りで複数指定ができる。
		{filters}は使用するfilterの名前、もしくは名前のリストである。
		filterは指定したリストの順番で呼び出される。
		{filters}は"matcher", "sorter", "converter"の名前のリストで
		指定することに注意しなければならない。特にmatcherの指定を忘
		れると、絞り込みができなくなるであろう。

unite#custom_max_candidates({source-name}, {max})
						*unite#custom_max_candidates()*
		{source-name}のmax_candidatesを{max}に変更する。
		{source-name}は","区切りで複数指定ができる。
		{max}に0を指定した場合、そのsourceの候補は全て表示される。

unite#take_action({action-name}, {candidate})
						*unite#take_action()*
		{candidate}に対し、{action-name}という名前のアクションを実行する。
		主に、|unite#custom_action()|などで用いる。
		is_selectableなアクションの場合は{candidate}がリストに自動変換
		される。

unite#take_parents_action({action-name}, {candidate}, {extend-candidate})
						*unite#take_parents_action()*
		|unite#take_action()|と同じだが、{candidate}に
		{extend-candidate}が合成された上で、parentsのアクションテーブル
		のみが検索される。親のアクションを再利用したいときに用いる。

unite#define_source({source})			*unite#define_source()*
		{source}を動的に追加する。sourceの仕様については、
		|unite-create-source|を参照せよ。
		すでにその名前のsourceが存在する場合は上書きされる。

unite#define_kind({kind})			*unite#define_kind()*
		{kind}を動的に追加する。kindの仕様については、
		|unite-create-kind|を参照せよ。
		すでにその名前のkindが存在する場合は上書きされる。

unite#define_filter({filter})			*unite#define_filter()*
		{filter}を動的に追加する。filterの仕様については、
		|unite-create-filter|を参照せよ。
		すでにその名前のfilterが存在する場合は上書きされる。

unite#undef_source({name})			*unite#undef_source()*
		|unite#define_source()|で追加した{name}というsourceを削除
		する。
		存在しないときは無視される。

unite#undef_kind({name})			*unite#undef_kind()*
		|unite#define_kind()|で追加した{name}というkindを削除する。
		存在しないときは無視される。

unite#undef_filter({name})			*unite#undef_filter()*
		|unite#define_filter()|で追加した{name}というfilterを
		削除する。
		存在しないときは無視される。

unite#filters#default#use({filters})		*unite#filters#default#use(()*
		|unite-filter-default|が使用するデフォルトのfilterを
		{filters}に変更する。{filters}には、filter名のリストを指定す
		る。

unite#filters#matcher_default#use({matchers})	*unite#filters#matcher_default#use(()*
		|unite-filter-matcher_default|が使用するデフォルトのmatcher
		を{matchers}に変更する。{matchers}には、matcher名のリストを
		指定する。

unite#filters#sorter_default#use({sorters})	*unite#filters#sorter_default#use(()*
		|unite-filter-sorter_default|が使用するデフォルトのsorterを
		{sorters}に変更する。{sorters}には、sorter名のリストを指定す
		る。

						*unite#filters#converter_default#use(()*
unite#filters#converter_default#use({converters})
		|unite-filter-converter_default|が使用するデフォルトの
		converterを{converters}に変更する。{converters}には、
		converter名のリストを指定する。

==============================================================================
source						*unite-sources*

ここでは、標準で実装されているsourceの仕様を解説する。

						*unite-source-file*
file		入力されたファイルを候補とする。
		Note: デフォルトでは、"../"といった親ディレクトリや隠しファイル
		は表示されない。絞り込み文字列に.を入力すると表示される。

						*unite-source-file_mru*
file_mru	最近使用したファイルを候補とする。使用した順番に整列される。

						*unite-source-directory_mru*
directory_mru	最近使用したカレントディレクトリを候補とする。使用した順番に整
		列される。

						*unite-source-file_rec*
file_rec	入力された絞り込みテキストのディレクトリまたは、現在ディレクト
		リ直下のファイルすべてを候補とする。ディレクトリや隠しファイル
		は候補から除外される。候補が多すぎる場合はフリーズするかもしれ
		ない。候補はsource内でキャッシュされるため、キャッシュを更新
		するためには、|<Plug>(unite_redraw)|を用いる。

		source引数：
		1. 絞り込み文字列

						*unite-source-buffer*
buffer		開いているバッファを候補とする。バッファは使用した順番に整列さ
		れる。

						*unite-source-buffer_tab*
buffer_tab	現在のタブで開いたバッファを候補とする。バッファは使用した順番
		に整列される。

						*unite-source-tab*
tab		開いているタブを候補とする。t:cwdをカレントディレクトリ、
		t:titleをタブのタイトルとして認識する。ただし、|gettabvar()|が
		使用可能である必要がある。

		もしt:titleが存在していた場合、絞り込みに使われる("word"として
		使用される。)存在していなかったら、代わりにタブの中での現在の
		バッファ名が使われる。

		source引数：
		1. no-currentを指定すると、カレントタブを除外する。

						*unite-source-register*
register	レジスタに保存されている文字列を候補とする。
		|yanktmp|がインストールされている場合、それも仮想レジスタとして
		参照できる。

						*unite-source-bookmark*
bookmark	ブックマークされたファイルやディレクトリを候補とする。

						*unite-source-source*
source		uniteのsource名そのものを候補とする。

		選択されたsource名を|unite#start()|で起動する。contextは現在
		のuniteバッファのものを受け継ぐ。

						*unite-source-window*
window		開いているウィンドウを候補とする。ウィンドウは移動した順番に
		整列される。

		source引数：
		1. no-currentを指定すると、カレントウインドウを除外する。

						*unite-source-output*
output		実行したVimコマンドの出力を候補とする。

		source引数：
		1. 実行するVimコマンド

						*unite-source-command*
command		VimのExコマンドを候補とする。

						*unite-source-mapping*
mapping		ユーザーが定義したマッピングを候補とする。

						*unite-source-grep*
grep		"grep"コマンドを実行した結果を候補とする。
		Note: このsourceはSixeight氏によって作成された。

		Note: このsourceはvimprocを必要としている。
		http://github.com/Shougo/vimproc/tree/master

		source引数：
		1. ターゲットとなるディレクトリ名
		2. "grep"に与えるオプション
		3. 絞り込みパターン

		Example:
>
	:Unite grep:~/.vim/autoload/unite/sources:-iR:file
<
		次のような特別なターゲットも認識する。
		%         : カレントバッファ名
		#         : 裏バッファ名
		$buffers  : 全てのバッファ名

						*unite-source-line*
line		カレントバッファの行を候補とする。
		Note: このsourceはt9md氏によって作成された。

		source引数：
		1. 検索方向。 "all", "forward", "backward"のうちどれかを指定
		する。省略すると"all"となる。

		Example:
>
	nnoremap <silent> /  :<C-u>Unite -buffer-name=search line -start-insert -no-quit<CR>
<
						*unite-source-resume*
resume		|:UniteResume|の引数となるuniteバッファを候補とする。uniteバッ
		ファは使用した順番に並び換えられる。

==============================================================================
kind						*unite-kinds*

ここでは、標準で実装されているkindの仕様と、内部で使用する属性について解説す
る。

						*unite-kind-common*
common		共通アクション
		ほとんどのkindはcommonを暗黙的に継承する。
		必須となるキーはwordのみ。

						*unite-kind-openable*
openable	オープン可能インタフェース
		必須となるキーは存在しないが、これを継承したkindにはopenアク
		ションが必須である。

						*unite-kind-cdable*
cdable		cd可能インタフェース

			action__directory	(文字列)		(必須)
				対象となるディレクトリ

						*unite-kind-file*
file		ファイル
		このkindはcdable, openableを継承しているため、それらのkindが
		使用する属性も必要である。

			action__path		(文字列)		(必須)
				対象となるファイルのパス

						*unite-kind-buffer*
buffer		バッファ
		このkindはfileを継承しているため、それらのkindが
		使用する属性も必要である。

			action__buffer_nr	(文字列)		(必須)
				対象となるバッファの番号

						*unite-kind-tab*
tab		タブ
		|gettabvar()|が使用可能な場合、このkindはcdableを継承するた
		め、それらのkindが使用する属性も必要である。

			action__tab_nr		(文字列)		(必須)
				対象となるタブの番号

						*unite-kind-directory*
directory	ディレクトリ
		このkindはfileを継承しているため、それらのkindが
		使用する属性も必要である。

						*unite-kind-word*
word		挿入可能文字列

			word			(文字列)		(必須)
				挿入する文字列

						*unite-kind-jump_list*
jump_list	ジャンプリスト
		このkindはopenableを継承しているため、それらのkindが
		使用する属性も必要である。

			action__path		(文字列)		(必須)
				ジャンプするファイルのパス

			action__line		(数値)			(任意)
				ジャンプするファイルの行番号

			action__pattern		(文字列)		(任意)
				ファイルを開いた後に検索するパターン

			action__text		(文字列)		(任意)
				ジャンプする行の内容

			action__signature	(文字列)		(任意)
				action__patternに設定するパターンや
				action__lineだけではジャンプ位置の一意性を保証
				できない場合に、同じパターンにマッチする行どう
				しを区別するための一意な文字列

		action__signatureとcalc_signature()関数

		action__signatureを設定するsourceは、バッファの行番号から
		signatureを計算するためのcalc_signature()関数を定義しなければ
		ならない。
		calc_signature()関数は{lnum}を引数に取り、signatureとなる文字
		列を返す。
		{lnum}は行番号である。
		jump_listはこの関数を呼び出してsignatureの比較を行う。

		以下にその例を示す。
>
		function! s:source.calc_signature(lnum)
		  let range = 2
		  let from = max([1, a:lnum - range])
		  let to   = min([a:lnum + range, line('$')])
		  return join(getline(from, to))
		endfunction
<
						*unite-kind-command*
command		VimのExコマンド

			action__command		(文字列)		(必須)
				実行するコマンド

			action__type		(文字列)		(任意)
				実行するコマンドの型。省略すると":"となる。
				":"または"/"のみ指定できる。指定できる型につ
				いての説明は、|histadd()|を参照せよ。

						*unite-kind-window*
window		ウィンドウ
		このkindはcdableを継承するため、それらのkindが使用する属性も
		必要である。

			action__window_nr	(文字列)		(必須)
				対象となるウィンドウの番号

						*unite-kind-completion*
completion	補完

			action__complete_word	(String)	(必須)
				補完する文字列

			action__complete_pos	(Number)	(必須)
				補完する位置

			action__complete_info	(String)	(任意)
				補完候補の追加情報

==============================================================================
filter						*unite-filter*

ここでは、標準で実装されているfilterの仕様と、内部で使用する属性について解説
する。

filterには大まかに分けて、"matcher", "sorter", "converter"の三種類が存在する。
matcherは入力に合う候補を取り出し、sorterは候補の並べ換えを行い、converterは
候補の見ためを変更する。
filterはデフォルトで、|unite-filter-default|にあるものが使用される。
だが、|unite#custom_filters()|でsource毎に変更することも可能である。

						*unite-filter-default*
default		特にfilterが指定されていないときに呼び出される、デフォルトの
		filter。このfilterは登録用のダミーである。
		初期状態では、["matcher_glob", "sorter_nothing",
		"converter_nothing"]のfilterを呼び出す。
		|unite#filters#default#use()|を呼び出すことで、デフォルトの
		filterを変更することができる。

						*unite-filter-matcher_default*
matcher_default	|unite-filter-default|により呼び出される、デフォルトのmatcher。
		初期状態では、["matcher_glob"]のmatcherを呼び出す。
		|unite#filters#matcher_default#use()|を呼び出すことで、デフォルトの
		matcherを変更することができる。

						*unite-filter-matcher_glob*
matcher_glob	ユーザーが入力したglobパターンにより候補をフィルタリングする
		matcher。
		絞り込みにはwordを使用する。

						*unite-filter-matcher_regexp*
matcher_regexp	ユーザーが入力したパターンを正規表現として、候補をフィルタリ
		ングするmatcher。絞り込みにはwordを使用する。

						*unite-filter-sorter_default*
sorter_default	|unite-filter-default|により呼び出される、デフォルトのsorter。
		初期状態では、["sorter_nothing"]のsorterを呼び出す。
		|unite#filters#sorter_default#use()|を呼び出すことで、デフォルトの
		sorterを変更することができる。

						*unite-filter-sorter_nothing*
sorter_nothing	何もsortをしないsorter。source側のsortがそのまま反映される。

						*unite-filter-sorter_word*
sorter_word	wordを比較するsorter。

						*unite-filter-converter_default*
converter_default
		|unite-filter-default|により呼び出される、デフォルトのconverter。
		初期状態では、["converter_nothing"]のconverterを呼び出す。
		|unite#filters#converter_default#use()|を呼び出すことで、デフォルトの
		converterを変更することができる。

						*unite-filter-converter_nothing*
converter_nothing
		候補を何も変更しないconverter。

==============================================================================
アクション					*unite-actions*

kind別アクション

common					*unite-action-common*
全てのkindに共通なインタフェースを定義している。
内部では、candidate.wordを使う。
	nop		何もしない
	yank		候補文字列をヤンクする
	yank_escape	エスケープした候補文字列をヤンクする
	ex		候補をエスケープして、コマンドラインに入力した状態にする
	insert		現在のバッファに文字列を挿入する

openable					*unite-action-openable*
オープン可能ファイルのインタフェースを定義している。内部でopenアクションを呼
び出すので、openアクションは継承したkind側が個別に定義する必要がある。
	tabopen		ファイルをタブで開く
	split		ウィンドウを水平分割してファイルを開く
	vsplit		ウィンドウを垂直分割してファイルを開く
	left		ウィンドウを垂直分割して左側にファイルを開く
	right		ウィンドウを垂直分割して右側にファイルを開く
	above		ウィンドウを水平分割して上側にファイルを開く
	below		ウィンドウを水平分割して下側にファイルを開く
	persist_open	ファイルを裏ウィンドウに開く。uniteバッファは閉じな
			い。

cdable					*unite-action-cdable*
cd可能ファイルのインタフェースを定義している。
	cd		カレントディレクトリを変更
	lcd		現在のウィンドウのカレントディレクトリを変更
	project_cd	プロジェクトのディレクトリを探し出し、そこにカレントデ
			ィレクトリを変更
	narrow		ディレクトリ名で候補を絞り込む
	vimshell	そのディレクトリで|vimshell|を起動する。これ
			は|vimshell|がインストールされている場合にのみ有効なア
			クションである。
	vimfiler	そのディレクトリで|vimfiler|を起動する。これは
			|vimfiler|がインストールされている場合にのみ有効なア
			クションである。
	tabvimfiler	そのディレクトリで|:VimFilerTab|を実行する。これは
			|vimfiler|がインストールされている場合にのみ有効な
			アクションである。
	rec		そのディレクトリで|unite-source-file_rec|を起動する。
	file		そのディレクトリで|unite-source-file|を起動する。

file						*unite-action-file*
ファイルはすべて別のバッファに開かれる。
このkindは|unite-action-openable|と|unite-action-cdable|のアクションを継承している。
	open		ファイルを開く
	preview		プレビューウィンドウにファイルを開く
	bookmark	候補をブックマークに追加する
	mkdir		ファイル名をディレクトリ名としてディレクトリを作成する。
			ファイルが存在する場合は無効。
	rename		ファイル名を変更する
	grep		ファイルをgrepする
	grep_directory	ディレクトリをgrepする

buffer						*unite-action-buffer*
このkindは|unite-action-file|のアクションを継承している。
	delete		バッファを|:bdelete|
	fdelete		バッファを|:bdelete!|
	wipeout		バッファを|:bwipeout|
	unload		バッファを|:bunload|
	bookmark	候補をブックマークに追加する
	rename		バッファのファイル名を変更する

tab						*unite-action-tab*
このkindは|gettabvar()|が存在するときのみ、|unite-action-cdable|のアクションを
継承する。
	open		タブを表示
	delete		タブを閉じる
	
	次のアクションは|gettabvar()|およびt:cwdが存在する必要がある。
	rename		タブのタイトルを変更

directory					*unite-action-directory*
このkindは|unite-action-file|のアクションを継承している。独自のアクションは存在
しない。対象がdirectoryのとき、default_actionを変更したい場合に使われる。

word						*unite-action-word*
このkindに独自のアクションは存在しない。対象がwordのとき、default_actionを変更
したい場合に使われる。

jump_list					*unite-action-jump_list*
このkindは|unite-action-openable|のアクションを継承している。ここではjump_list独自
のアクションについて解説する。
	open		その候補の場所にジャンプする
	preview		その候補の場所をプレビューする
	replace		選択した候補を|qfreplace|プラグインで置換する。
			候補にaction__textが必要である。

command						*unite-action-command*
	execute		コマンドを実行する
	edit		コマンドをコマンドラインに入力する

window						*unite-action-window*
このkindは|unite-action-cdable|のアクションを継承する。
	open		ウィンドウへ移動
	delete		ウィンドウを閉じる
	only		そのウィンドウ以外すべて閉じる

completion					*unite-action-completion*
	insert		候補の挿入
	preview		候補の情報を表示

source別アクション

file_mru					*unite-action-file_mru*
	delete		最近使用したファイルの候補から削除

directory_mru					*unite-action-directory_mru*
	delete		最近使用したディレクトリの候補から削除

bookmark					*unite-action-bookmark*
	delete		ブックマークファイルの候補から削除

						*unite-default-action*
デフォルトアクション

kind		アクション
{kind}		{action}
----------	----------
file		open
buffer		open
tab		open
directory	narrow
word		insert
jump_list	open

==============================================================================
sourceの作成					*unite-create-source*

autoload/unite/sources/に*.vimのファイルを置いておくと、自動的に読み込まれる。
その際、unite#sources#{source_name}#define()が呼ばれ、戻り値がsourceと解釈される。
戻り値はリストでもよく、その場合はsourceのリストと解釈される。
sourceを追加したくない場合は、空リストを返せば良い。
独自のsourceを動的に追加するためには、|unite#define_source()|を使う。

------------------------------------------------------------------------------
sourceの属性					*unite-source-attributes*

						*unite-source-attribute-name*
name			文字列		(必須)
			sourceの名前。以下の文字で構成しなければならない。
			文字:
			- a-z
			- 0-9
			- _
			- /

			例:
			- "buffer", "virw/git" と "file_mru" は正当。
			- "BadOne", "!@#$%^&*()_[]{}-|" と "" は
			  sourceの名前としては使えない。

						*unite-source-attribute-gather_candidates*
gather_candidates	関数		(ほぼ必須)
			uniteが候補を収集する際に一度だけ呼ばれる。ただし、
			|<Plug>(unite_redraw)|による再描画の際にも呼ばれる。
			sourceが|unite-source-attribute-is_volatile|の場合は、
			|unite-source-attribute-change_candidates|が定義され
			ていない限り、入力文字列が変化すると呼ばれる。
			この関数は{args}と{context}を引数に取り、{candidate}の
			リストを返す。
			{args}は|:Unite|コマンドを実行された際にsourceに渡され
			た引数リスト、{context}はsourceが呼ばれたときのコンテキ
			スト情報である。
			{context}については|unite-notation-{context}|、
			{candidate}については|unite-notation-{candidate}|を参照
			せよ。
			この属性は基本的に必須だが、他の属性を用いて候補を取得
			できる場合には省略することができる。
			この属性で収集された候補はuniteバッファによりキャッ
			シュされる。キャッシュはuniteバッファが閉じられるま
			で有効だが、uniteバッファが閉じられると
			|:UniteResume|を使わない限り破棄される。uniteバッファ
			の寿命によらず永続的にキャッシュしたい場合は、source
			側でキャッシュを保存しておく必要がある。

						*unite-source-attribute-change_candidates*
change_candidates	関数		(任意)
			uniteが候補を収集する際に、入力文字列が変化すると呼ばれ
			る。入力文字列から候補を生成するときに便利である。
			この属性で追加する候補は、
			|unite-source-attribute-gather_candidates|によって
			キャッシュした候補に追加される。
			この関数は{args}と{context}を引数に取り、{candidate}の
			リストを返す。
			引数や戻り値の仕様は
			|unite-source-attribute-gather_candidates|と同一であ
			る。

						*unite-source-attribute-async_gather_candidates*
async_gather_candidates	関数		(任意)
			uniteが候補を収集する際に、非同期に呼ばれる。時間のかか
			る処理を細切れで行う際に便利である。
			デフォルトのタイミングは、|g:unite_update_time|である。
			この関数は{args}と{context}を引数に取り、{candidate}の
			リストを返す。
			引数や戻り値の仕様は
			|unite-source-attribute-gather_candidates|と同一であ
			る。

						*unite-source-attribute-hooks*
hooks			辞書		(任意)
			uniteへのフック関数を指定する。キーはフックする位置、値
			は呼び出す関数へのリファレンスである。
			標準では、次のようなフックが定義されている。

			on_init			*unite-source-attribute-hooks-on_init*
			|:Unite|系のコマンドを実行した際や|unite#start()|を呼ん
			だ際に、uniteバッファに移る前に呼ばれる。|:UniteResume|
			では呼ばれない。
			この関数は{args}と{context}を引数に取る。
			この関数が呼ばれた際、まだuniteバッファは初期化されてい
			ないので呼び出す関数には注意しなければならない。

			on_syntax		*unite-source-attribute-hooks-on_syntax*
			uniteバッファが初期化され、source毎のシンタックスが
			設定された後に呼ばれる。
			|unite-source-attribute-syntax|が設定されていない場
			合は呼び出されない。
			この関数は{args}と{context}を引数に取る。
			source毎のハイライト設定はここで行う。

			ハイライトの設定例：
>
			syntax match uniteSource_FileMru_Time /(.*)/ contained containedin=uniteSource_FileMru
			highlight default link uniteSource_FileMru_Time Statement
<
			|unite-source-attribute-syntax|で設定したsyntax名を
			containedinで指定することに注意しなければならない。

			on_close		*unite-source-attribute-hooks-on_close*
			<Plug>(unite_exit)を実行したときや、コマンドの実行後に
			uniteバッファが閉じられた後に呼ばれる。
			この関数は{args}と{context}を引数に取る。

			on_post_filter		*unite-source-attribute-hooks-on_post_filter*
			filterが呼ばれ、候補が絞り込まれた後に呼ばれる。
			パフォーマンスの影響を避けるため、絞り込まれた後に属性
			をセットする際に使用する。
			この関数は{args}と{context}を引数に取る。

						*unite-source-attribute-action_table*
action_table		辞書		(任意)
			source独自のアクションテーブルを追加するときに使用する。
			キーはアクションテーブルを追加するkindで、値は追加す
			るアクションテーブルである。それぞれのアクションテーブ
			ルの仕様は、|unite-kind-attribute-action_table|と同じで
			ある。つまり、source側では候補のkind毎に
			|unite-kind-attribute-action_table|を定義できる。
			例えば、
>
			'action_table' : { 'buffer' : foo_action_table }
<
			の場合、このsourceのkind "buffer"では、foo_action_table
			が使用される。
			キーのkindに"*"を設定すると、どんなkindにもマッチするよ
			うになる。候補のkindが一種類しかない場合に便利である。
			もしこれが与えられない場合、空となる。

						*unite-source-attribute-default_action*
default_action		辞書		(任意)
			source独自の標準的なアクションを追加するときに使用する。
			キーはアクションテーブルを追加するkindで、値は標準ア
			クションである。これを省略した場合はkindの
			default_actionを使用する。
			default_actionは文字列形式にすることもできる。
			その場合、'default_action' : { '*' : action_name }と指
			定したことと同じとなる。

						*unite-source-attribute-alias_table*
alias_table		辞書		(任意)
			source独自のエイリアステーブルを追加するときに使用す
			る。キーはエイリアステーブルを追加するkindで、値は追
			加するエイリアステーブルである。キーに"*"を設定する
			と、どんなkindにもマッチするようになる。
			エイリアステーブルの詳細については、
			|unite-kind-attribute-action_table|を参照せよ。もし
			これが与えられない場合、空となる。

						*unite-source-attribute-max_candidates*
max_candidates		数値		(任意)
			候補の最大数。
			この属性は任意である。もしこれが与えられない場合、0がデ
			フォルト値として使われる。この場合、最大数の制限はない。

						*unite-source-attribute-required_pattern_length*
required_pattern_length	数値		(任意)
			候補を収集するのに必要な絞り込み文字列の長さ。
			この属性は任意である。もしこれが与えられない場合、0がデ
			フォルト値として使われる。この場合、常に候補が収集され
			る。

						*unite-source-attribute-is_volatile*
is_volatile		数値		(任意)
			入力が変化するごとに、sourceが毎回候補を再計算するかど
			うか。
			この属性は任意である。もしこれが与えられない場合、0がデ
			フォルト値として使われる。この場合、候補はuniteバッファ
			によりキャッシュされ、毎回
			|unite-source-attribute-gather_candidates|が呼ばれるこ
			とはない。ただし、このキャッシュはそのuniteバッファが
			閉じられるまで有効である。もっと長い時間キャッシュした
			い場合はsourceが自前でキャッシュするほかない。

						*unite-source-attribute-description*
description		文字列		(任意)
			sourceを説明する文字列。省略すると""になる。
			|unite-source-source|において表示に使われる。

						*unite-source-attribute-syntax*
syntax			文字列		(任意)
			source内で使用するsyntax名。ここで設定したsyntax名は
			uniteによって自動的に定義される。省略すると""になる。
			source独自のハイライトを設定する際に使用される。
			他のsyntaxと被らないようにするため、
			"uniteSource__(source名)"とする慣習となっている。
			ハイライトの設定自体は、
			|unite-source-attribute-hooks-on_syntax|を使用しなけ
			ればならない。

						*unite-source-attribute-source__*
source__		不定		(任意)
			source毎の独自属性。unite側の属性と被らないように、
			source__プレフィクスを追加しなければならない。

NOTATION					*unite-notation*

{context}					*unite-notation-{context}*
			コンテキスト情報を与える辞書変数。主に、次の情報を持つ。
			グローバルなコンテキスト情報は|unite#get_context()|で取
			得できる。コンテキスト情報は、source毎に独立して持って
			いるため、ここにsource__で始まるキーを格納することで、
			source独自の情報を格納することができる。

			input			(文字列)
				ユーザーの入力文字列。

			buffer_name		(文字列)
				uniteバッファの名前。

			prompt			(文字列)
				uniteバッファのプロンプト文字列。

			is_insert		(数値)
				uniteバッファが挿入モードから呼び出されたかどう
				か。

			immediately		(数値)
				uniteバッファが|unite-options-immediately|によ
				って呼び出されたかどうか。

			is_redraw		(数値)
				|<Plug>(unite_redraw)|で呼び出されたかどうか。
				ユーザーが明示的にキャッシュを破棄しているので、
				自前でキャッシュを管理するsourceにとっては重
				要な情報となる。

			is_async		(数値)
				sourceが非同期に候補を収集するかどうか。
				|unite-source-attribute-async_gather_candidates|
				が存在する場合、1となる。これをsource内で明示的
				に0にセットすると今後非同期では呼ばれなくなる。

			source			(辞書)
				現在候補を収集しているsourceの情報。

			candidates		(リスト)
				フィルタリング終了後の候補。
				|unite-source-attribute-hooks-on_post_filter|内
				でのみ有効。

			winnr			(数値)
				uniteを呼び出したウィンドウの番号。

			source__{name}		(不定)		(任意)
				source独自の付加情報。source側で自由に使用でき
				る。複数回同じsourceを呼び出せるようにするため
				s:変数ではなく、ここに情報を格納することが推
				奨される。

{candidate}					*unite-notation-{candidate}*
			候補を表す辞書変数。次の情報を持つ。

			word			(文字列)
				画面に表示される候補を表す文字列。候補の絞り込
				みに使われる。

			abbr			(文字列)	(任意)
				画面に表示される候補を表す文字列。wordより優先
				されるが、候補の絞り込みには使われない。

			source			(文字列)	(任意)
				候補が所属するsource名。省略された場合、自動
				的にセットされる。

			kind			(文字列)	(任意)
				候補が所属するkind名。省略すると"common"となる。

			is_dummy		(数値)		(任意)
				ダミー候補であるかどうか。省略すると0となる。
				ダミー候補の場合、アクションや移動時に無視さ
				れる。

			source__{name}		(不定)		(任意)
				source独自の付加情報。source側で自由に使用でき
				る。

			action__{name}		(不定)		(任意)
				actionが使用する付加情報。例えば、
				"action__path"はそのファイルが存在するパスを指
				定する。実行するactionによって、その仕様は異な
				る。標準で定義されるkindの仕様については、
				|unite-kind|を参照せよ。

==============================================================================
kindの作成					*unite-create-kind*

autoload/unite/kinds/に*.vimのファイルを置いておくと、自動的に読み込まれる。
その際、unite#kinds#{kind_name}#define()が呼ばれ、戻り値がkindと解釈される。
戻り値はリストでもよく、その場合はkindのリストと解釈される。
kindを追加したくない場合は、空リストを返せば良い。
独自のkindを動的に追加するためには、|unite#define_kind()|を使う。

------------------------------------------------------------------------------
kindの属性					*unite-kind-attributes*

						*unite-kind-attribute-name*
name			文字列		(必須)
			kindの名前。以下の文字で構成しなければならない。
			ただし、"source"と"common"は予約されている。
			文字:
			- a-z
			- 0-9
			- _
			- /

			例:
			- "buffer", "virw/git" と "file_mru" は正当。
			- "BadOne", "!@#$%^&*()_[]{}-|" と "" は
			  kindの名前としては使えない。

						*unite-kind-attribute-default_action*
default_action		文字列		(必須)
			|<Plug>(unite_do_default_action)|を実行した際に呼ばれる
			標準的なアクションの名前を指定する。これを省略した場合
			は実行時にエラーになるが、それを逆手に取り、継承に使う
			だけのインタフェースアクションではこれを定義しないとい
			う手がある。

						*unite-kind-attribute-action_table*
action_table		辞書		(必須)
			アクションテーブルを指定する。
			アクションテーブルは辞書となっていて、キーとして、アク
			ションの名前を取る。値として、次の辞書情報を持つ。
			ただしアクションの名前として、"default"と"nop"は予約さ
			れている。ユーザーは使用できない。
			
			func			(関数)
				アクションの実行時に呼び出される関数。
				{candidate}を引数に取る。アクションの
				is_selectableが1の場合、{candidate}には候補のリ
				ストが渡される。{candidate}はキャッシュされてい
				るので、中身を変更してはならない。変更する場合
				は、|deepcopy()|を使うこと。

			description		(文字列)	(任意)
				アクションを説明する文字列。省略すると""になる。

			is_quit			(数値)		(任意)
				アクション実行前にuniteバッファを終了するかどう
				か。省略すると1になり、uniteバッファを終了する。

			is_selectable		(数値)		(任意)
				このアクションが候補を複数選択可能した際に実行
				可能かどうか。省略すると0になり、複数選択してい
				るとエラーとなる。

			is_invalidate_cache	(数値)		(任意)
				このアクションを実行した際にキャッシュを無効化
				するかどうか。省略すると0になり、キャッシュは無
				効化されない。

						*unite-kind-attribute-alias_table*
alias_table		辞書		(任意)
			エイリアステーブルを指定する。
			エイリアステーブルは辞書となっていて、キーとして、アク
			ションの名前を取る。値として、エイリアスとなるアクショ
			ン名を持つ。アクションに短縮名を付けたいときに便利で
			ある。値を"nop"とすると、そのアクションを無効化でき
			る。

						*unite-kind-attribute-parents*
parents			リスト		(任意)
			アクションを継承するkindの名前をリスト形式で指定する。
			省略すると、["common"]となる。アクションの検索について
			は、リストの順番で辿っていき、後から見つかったものによ
			って上書きされる。アクションは親のkindを辿って再帰的に
			検索されるので、無限ループに注意しなければならない。

------------------------------------------------------------------------------
sourceに特殊化されたkind			*unite-implicit-kind-for-a-source*

uniteはある特定のsourceによって生成されたkindを認識し、アクションを特殊化す
ることができる。特殊化されたkind名は、"source/{name}/{kind}"となる。{name}には
source名を指定する。{kind}を"*"とすると、どんなkindにもマッチする。

例えば、source "file"において"delete"アクションを追加するには以下のようにする。
>
	call unite#custom_action('source/file/*', 'delete', function('...'))
<
------------------------------------------------------------------------------
actionの解決順序				*unite-action-resolution-order*

例えば、source "file"によって生成された、kind "file"(これは"openable",
"cdable"を継承している)の候補に対してアクションを実行した場合、アクションの
解決順序は次のようになる。

(1) Custom action table for kind "source/file/file".
(2) Default action table for kind "source/file/file".
(3) Custom action table for kind "source/file/*".
(4) Default action table for kind "source/file/*".
(5) Custom action table for kind "file".
(6) Default action table for kind "file".
(7) Custom action table for kind "openable".
(8) Default action table for kind "openable".
(9) Custom action table for kind "cdable".
(10) Default action table for kind "cdable".
(11) Custom action table for kind "common".
(12) Default action table for kind "common".

==============================================================================
filterの作成					*unite-create-filter*

autoload/unite/filters/に*.vimのファイルを置いておくと、自動的に読み込まれる。
その際、unite#filters#{filter_name}#define()が呼ばれ、戻り値がfilterと解釈される。
戻り値はリストでもよく、その場合はfilterのリストと解釈される。
filterを追加したくない場合は、空リストを返せば良い。
独自のfilterを動的に追加するためには、|unite#define_filter()|を使う。

------------------------------------------------------------------------------
filterの属性					*unite-filter-attributes*

						*unite-filter-attribute-name*
name			文字列		(必須)
			filterの名前。

						*unite-filter-attribute-filter*
filter			関数		(必須)
			uniteが候補を収集した後、フィルタリングする際に呼ばれる。
			この関数は{candidates}と{context}を引数に取り、
			{candidate}のリストを返す。
			{candidate}はsourceが
			|unite-source-attribute-gather_candidates|で収集した
			候補リスト、{context}はsourceが呼ばれたときのコンテ
			キスト情報である。
			{context}については|unite-notation-{context}|、
			{candidate}については|unite-notation-{candidate}|を参照
			せよ。

						*unite-filter-attribute-description*
description		文字列		(任意)
			filterを説明する文字列。省略すると""になる。

==============================================================================
設定例						*unite-examples*
>
	
	" The prefix key.
	nnoremap    [unite]   <Nop>
	nmap    f [unite]
	
	nnoremap <silent> [unite]c  :<C-u>UniteWithCurrentDir -buffer-name=files buffer file_mru bookmark file<CR>
	nnoremap <silent> [unite]b  :<C-u>UniteWithBufferDir -buffer-name=files -prompt=%\  buffer file_mru bookmark file<CR>
	nnoremap <silent> [unite]r  :<C-u>Unite -buffer-name=register register<CR>
	nnoremap <silent> [unite]o  :<C-u>Unite outline<CR>
	nnoremap  [unite]f  :<C-u>Unite source<CR>
	
	autocmd FileType unite call s:unite_my_settings()
	function! s:unite_my_settings()"{{{
	  " Overwrite settings.
	
	  nmap <buffer> <ESC>      <Plug>(unite_exit)
	  imap <buffer> jj      <Plug>(unite_insert_leave)
	  "imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)
	
	  " <C-l>: manual neocomplcache completion.
	  inoremap <buffer> <C-l>  <C-x><C-u><C-p><Down>
	
	  " Start insert.
	  "let g:unite_enable_start_insert = 1
	endfunction"}}}
	
	let g:unite_source_file_mru_limit = 200
	let g:unite_cursor_line_highlight = 'TabLineSel'
	let g:unite_abbr_highlight = 'TabLine'
	
	" For optimize.
	let g:unite_source_file_mru_filename_format = ''
	
>
==============================================================================
ユーザーのsource				*unite-user-sources*

作者以外の手により作成されたsourceについては、Wikiのページを参照せよ。
https://github.com/Shougo/unite.vim/wiki/unite-plugins

==============================================================================
TODO						*unite-todo*

==============================================================================
既知のバグ					*unite-bugs*

==============================================================================
更新履歴					*unite-changelog*

doc/unite.txtを参照せよ。

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:fdl=0:
