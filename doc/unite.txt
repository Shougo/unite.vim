*unite.txt*	Unite and create user interfaces.

Version: 5.1
Author : Shougo <Shougo.Matsu@gmail.com>
Documentation Author: ujihisa <ujihisa at gmail com>
License: MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

CONTENTS					*unite-contents*

Introduction		|unite-introduction|
Usage			|unite-usage|
Install			|unite-install|
Configuration Examples	|unite-examples|
Interface		|unite-interface|
  Commands		  |unite-commands|
  Variables		  |unite-variables|
    Sources variables	    |unite-sources-variables|
    Kind variables	    |unite-kind-variables|
    Filter variables	    |unite-filter-variables|
  Key mappings		  |unite-key-mappings|
  Functions		  |unite-functions|
  Options		  |unite-options|
Sources			|unite-sources|
Kinds			|unite-kinds|
Actions			|unite-actions|
Filters			|unite-filters|
Create source		|unite-create-source|
Create kind		|unite-create-kind|
Create filter		|unite-create-filter|
External source		|unite-external-sources|
FAQ			|unite-faq|

==============================================================================
INTRODUCTION					*unite-introduction*

*Unite* is a common extensible interface for searching and displaying lists of
information from within vim. It can display and search through any arbitrary
source, from files and directories to buffers and registers.

The difference between |unite| and similar plug-ins like |fuzzyfinder|,
|ctrl-p| or |ku| is, |unite| provides a standard interface for any sources.
The API is flexible enough that it can be used to build your own interface.

==============================================================================
USAGE						*unite-usage*

	To browse a list of currently open buffers like |:ls| command.
>
	:Unite buffer
<
	To browse a list of files in the current working directory.
>
	:Unite file
<
	To browse recursive list of all the files under the current working
	directory.
>
	:Unite file_rec
<
	Or you can combine sources, to browse files and buffers.
>
	:Unite file buffer
<
	There are a number of command line flags(see |unite-options|), for
	example to set an initial search term (foo) to filter files search.
>
	:Unite -input=foo file
<

Invoking unite will create a horizontal split buffer by default.
>
	:Unite file
<
This example lists all the files in the current directory.  You can select one
in the in the unite window by moving the cursor with normal Vim navigation,
e.g. j and k.  Pressing Enter on a candidate and it will open it in a new
buffer.

Enter will trigger the default action, which in the case of "file" is open,
however alternate actions can be defined. These alternative actions can be
invoked with <Tab>.  See also |unite-action| to read on about different
actions.

You can also narrow down the list of candidates with a keyword.  By entering
insert mode in a unite window, the cursor will jump to the unite prompt (">")
at the top of the window. Typing at the unite prompt will filter the candidate
list.

You can also use the wild card "*" as an arbitrary character sequence.
>
	*hisa
<
This example matches hisa, ujihisa, or ujihisahisa.

Two consecutive wild cards recursively match directories.
>
	**/foo
<
This example would matche bar/foo or buzz/bar/foo.

Note: The unite action |file_rec| (read: file recursive) does a recursive
file search by default without the need to set wildcards.

Multiple keywords can be be use to narrow down the candidates.  They are
separated by either a space " " or a pipe "|", and act like a logical AND.
>
	foo bar
	foo|bar
<
This example matches "foobar" and "foobazbar", but not "foobaz"

Specify negative conditions with a bang "!".
>
	foo !bar
<
This example matches candidates that contain "foo" but not "bar".

Specify command execution after the action with a ":".
>
	" Jump to line 3.
	foo :3
	" Search to "bar".
	foo :/bar
	" Executes :diffthis command.
	foo :diffthis
<
See |unite_default_key_mappings| for other actions.

==============================================================================
INSTALL						*unite-install*

Install the distributed files into your Vim script directory which is usually
~/.vim/, or $HOME/vimfiles on Windows.  You should consider to use one of the
famous package managers for Vim like vundle or neobundle to install the
plugin.

After installation you can run unite with the |:Unite| command and append the
sources to the command you wish to select from as parameters.  However, it's a
pain in the ass to run the command explicitly every time, so I recommend you
to set a key mapping for the command.

==============================================================================
EXAMPLES					*unite-examples*

With off the fexibility and power that unite gives you it is recommended that
you create some normal mode mappings for invoking unite in your .vimrc file.

A simple mapping that will configure <leader>-f to browse for a file in the
current working dorectory:
>
	nnoremap <leader>f :<C-u>Unite file<CR>
<
The same mapping, but instead start in insert mode so any typing will filter
the candidate list:
>
	nnoremap <leader>f :<C-u>Unite -start-insert file<CR>
<
The popular recursive file search, starting insert automatically and using
fuzzy file matching:
>
	call unite#filters#matcher_default#use(['matcher_fuzzy'])
	nnoremap <leader>r :<C-u>Unite -start-insert file_rec<CR>
<
Note: with large projects this may cause some performance problems. Normally
it is recommended to use |unite-source-file_rec/async| source, which requires
|vimproc|. The mapping might look something like this:
>
	nnoremap <leader>r :<C-u>Unite -start-insert file_rec/async:!<CR>
<
Most recently used files:
>
	nnoremap <leader>m :<C-u>Unite file_mru<CR>
<
Search through yank history. First, this must be enabled to track yank
history, then the mapping set.
>
	let g:unite_source_history_yank_enable = 1
	nnoremap <leader>y :<C-u>Unite history/yank<CR>
<
Since you can pass in multiple sources into unite you can easily create a
mapping that will open up a unite pane with the sources you frequently use.
To see buffers, recent files then bookmarks:
>
	nnoremap <silent> <leader>b :<C-u>Unite buffer file_mru bookmark<CR>
<
Much more spophisticated mappings can be configured to very quickly find what
you need in vim.

More advanced configuration example:
>
	" The prefix key.
	nnoremap    [unite]   <Nop>
	nmap    f [unite]

	nnoremap <silent> [unite]c  :<C-u>UniteWithCurrentDir
	        \ -buffer-name=files buffer file_mru bookmark file<CR>
	nnoremap <silent> [unite]b  :<C-u>UniteWithBufferDir
	        \ -buffer-name=files -prompt=%\  buffer file_mru bookmark file<CR>
	nnoremap <silent> [unite]r  :<C-u>Unite
	        \ -buffer-name=register register<CR>
	nnoremap <silent> [unite]o  :<C-u>Unite outline<CR>
	nnoremap <silent> [unite]f
	        \ :<C-u>Unite -buffer-name=resume resume<CR>
	nnoremap <silent> [unite]d
	        \ :<C-u>Unite -buffer-name=files -default-action=lcd directory_mru<CR>
	nnoremap <silent> [unite]ma
	        \ :<C-u>Unite mapping<CR>
	nnoremap <silent> [unite]me
	        \ :<C-u>Unite output:message<CR>
	nnoremap  [unite]f  :<C-u>Unite source<CR>

	nnoremap <silent> [unite]s
	        \ :<C-u>Unite -buffer-name=files -no-split
	        \ jump_point file_point buffer_tab
	        \ file_rec:! file file/new file_mru<CR>

	" Start insert.
	"let g:unite_enable_start_insert = 1
	"let g:unite_enable_short_source_names = 1

	" To track long mru history.
	"let g:unite_source_file_mru_long_limit = 3000
	"let g:unite_source_directory_mru_long_limit = 3000

	" Like ctrlp.vim settings.
	"let g:unite_enable_start_insert = 1
	"let g:unite_winheight = 10
	"let g:unite_split_rule = 'botright'

	" Prompt choices.
	"let g:unite_prompt = '❫ '
	"let g:unite_prompt = '» '

	autocmd FileType unite call s:unite_my_settings()
	function! s:unite_my_settings()"{{{
	  " Overwrite settings.

	  nmap <buffer> <ESC>      <Plug>(unite_exit)
	  imap <buffer> jj      <Plug>(unite_insert_leave)
	  "imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)

	  imap <buffer><expr> j unite#smart_map('j', '')
	  imap <buffer> <TAB>   <Plug>(unite_select_next_line)
	  imap <buffer> <C-w>     <Plug>(unite_delete_backward_path)
	  imap <buffer> '     <Plug>(unite_quick_match_default_action)
	  nmap <buffer> '     <Plug>(unite_quick_match_default_action)
	  imap <buffer><expr> x
	          \ unite#smart_map('x', "\<Plug>(unite_quick_match_choose_action)")
	  nmap <buffer> x     <Plug>(unite_quick_match_choose_action)
	  nmap <buffer> <C-z>     <Plug>(unite_toggle_transpose_window)
	  imap <buffer> <C-z>     <Plug>(unite_toggle_transpose_window)
	  imap <buffer> <C-y>     <Plug>(unite_narrowing_path)
	  nmap <buffer> <C-y>     <Plug>(unite_narrowing_path)
	  nmap <buffer> <C-j>     <Plug>(unite_toggle_auto_preview)
	  nmap <buffer> <C-r>     <Plug>(unite_narrowing_input_history)
	  imap <buffer> <C-r>     <Plug>(unite_narrowing_input_history)
	  nnoremap <silent><buffer><expr> l
	          \ unite#smart_map('l', unite#do_action('default'))

	  let unite = unite#get_current_unite()
	  if unite.buffer_name =~# '^search'
	    nnoremap <silent><buffer><expr> r     unite#do_action('replace')
	  else
	    nnoremap <silent><buffer><expr> r     unite#do_action('rename')
	  endif

	  nnoremap <silent><buffer><expr> cd     unite#do_action('lcd')
	  nnoremap <buffer><expr> S      unite#mappings#set_current_filters(
	          \ empty(unite#mappings#get_current_filters()) ?
	          \ ['sorter_reverse'] : [])

	  " Runs "split" action by <C-s>.
	  imap <silent><buffer><expr> <C-s>     unite#do_action('split')
	endfunction"}}}

	let g:unite_source_file_mru_limit = 200
	let g:unite_cursor_line_highlight = 'TabLineSel'
	let g:unite_abbr_highlight = 'TabLine'

	" For optimize.
	let g:unite_source_file_mru_filename_format = ''

	if executable('jvgrep')
	  " For jvgrep.
	  let g:unite_source_grep_command = 'jvgrep'
	  let g:unite_source_grep_default_opts = '--exclude ''\.(git|svn|hg|bzr)'''
	  let g:unite_source_grep_recursive_opt = '-R'
	endif

	" For ack.
	if executable('ack-grep')
	  " let g:unite_source_grep_command = 'ack-grep'
	  " let g:unite_source_grep_default_opts = '--no-heading --no-color -a'
	  " let g:unite_source_grep_recursive_opt = ''
	endif
<
==============================================================================
INTERFACE					*unite-interface*

------------------------------------------------------------------------------
COMMANDS 					*unite-commands*

:Unite [{options}] {sources}			*:Unite*
		Unite can be invoked with one or more source. This can be done
		by specifying the list on the command line, separated by
		spaces. The list of candidates (the matches found in the source
		by your filter string) will be ordered in the same order that
		you specify the {sources}.

		For example:

		:Unite file buffer

		Will first list the files, then list the buffers.

		See also |unite-source| the available sources.

		In case you are already in a unite buffer, the narrowing text
		is stored.

		Unite can accept a list of strings, separated with ":", after
		the name of sources.  You must escape ":" and "\" with "\"
		in parameters themselves. "::" is an abbreviation argument.  It
		depends on the sources how the parameters are interpreted.

		Examples:
		"file:foo:bar": the parameters of source file are
		                ["foo", "bar"].
		"file:foo\:bar": the parameter of source file is
		                ["foo:bar"].
		"file:foo::baz": the parameters of source file are
		                ["foo", "", "bar"].

		{options} are options for a unite buffer: |unite-options|

:UniteWithCurrentDir [{options}] {sources}	*:UniteWithCurrentDir*
		Equivalent to |:Unite| except that it targets the current
		directory for the initial narrowing text.

:UniteWithBufferDir [{options}] {sources}	*:UniteWithBufferDir*
		Equivalent to |:Unite| except that it targets the buffer's
		directory for the initial narrowing text.

:UniteWithInput [{options}] {sources}		*:UniteWithInput*
		Equivalent to |:Unite| except that it will prompt the user for
		narrowing text before opening the unite buffer.

:UniteWithCursorWord [{options}] {sources}	*:UniteWithCursorWord*
		Equivalent to |:Unite| except that it targets the word under
		the cursor for the initial narrowing text.

:UniteResume [{options}] [{buffer-name}]	*:UniteResume*
		Reuses the unite buffer named {buffer-name} that you opened
		previously.  Narrowing texts or candidates are
		as-is.  If {options} are given, context information gets
		overridden.

		Note: Reuses the last unite buffer you used in current tab if
		you skip specifying {buffer-name}.

:UniteClose {buffer-name}			*:UniteClose*
		Closes the unite buffer with {buffer-name}.

The commands of source				*:unite-sources-commands*

:UniteBookmarkAdd [{file}]			*:UniteBookmarkAdd*
		Adds a file to the bookmark list. By default this will also
		store the position of the current file.

------------------------------------------------------------------------------
VARIABLES 					*unite-variables*

g:unite_update_time				*g:unite_update_time*
		The time interval for updating the canidate list as the filter
		text it typed.

		In Msec.

		The default value is 500.

g:unite_prompt			                *g:unite_prompt*
		Unite default prompt.  Can also be set with the `-prompt`
		command line argument.

		The default value is '> '.

g:unite_enable_start_insert			*g:unite_enable_start_insert*
		If this variable is 1, unite buffer will be in Insert Mode
		immediately.

		The default value is 0.

g:unite_split_rule				*g:unite_split_rule*
		Defines split position rule.

		The default value is "topleft".

g:unite_enable_split_vertically
					*g:unite_enable_split_vertically*
		If this variable is 1, unite window is split vertically.

		The default value is 0; window is split horizontally.

g:unite_winheight				*g:unite_winheight*
		The height of unite window when split horizontally. Ignored
		when splitting vertically.

		The default value is 20.

g:unite_winwidth				*g:unite_winwidth*
		The width of unite window when split vertically. Ignored
		when splitting horizontally.

		The default value is 90.

g:unite_cursor_line_highlight		*g:unite_cursor_line_highlight*
		Specify the cursor line highlight group.

		The default value is "PmenuSel".

g:unite_abbr_highlight				*g:unite_abbr_highlight*
		Specify abbreviated candidates highlight.

		The default value is "Normal".

				*g:unite_enable_use_short_source_names*
g:unite_enable_use_short_source_names
		If this variable is 1, unite buffer will show short source
		names.

		The default value is 0.

g:unite_marked_icon				*g:unite_marked_icon*
		Controls unite marked candidates icon.

		Note: This must be one character.

		Default value is "*".

g:unite_candidate_icon				*g:unite_candidate_icon*
		Controls unite normal candidates icon.

		Note: It must be one character.

		Default value is " ".

					*g:unite_force_overwrite_statusline*
g:unite_force_overwrite_statusline
		If this variable is 1, unite will overwrite 'statusline'
		automatically.

		Note: If you want to change 'statusline' in unite buffer, this
		must set it to 0.

		The default value is 1.

g:unite_quick_match_table			*g:unite_quick_match_table*
		The table of completion candidates of quick match list,
		corresponding the narrowing text.

		The default value is complex; so see plugin/unite.vim.

g:unite_data_directory				*g:unite_data_directory*
		Specify directories to store unite configurations. Used by
		both unite itself and its sources.  If the directory doesn't
		exist, the directory is automatically generated.  For example
		source of file_mru saves the information of the most recent
		used files into this directory.

		The Default value is expand('~/.unite'); the absolute path
		of it.

g:unite_no_default_keymappings		*g:unite_no_default_keymappings*
		If this variable is 1, unite doesn't set any default key
		mappings.  Not recomended. You shouldn't set this to 1 unless
		you are a specific reason.

		This variable doesn't exist unless you define explicitly.

SOURCES VARIABLES 				*unite-sources-variables*

g:unite_source_buffer_time_format
					*g:unite_source_buffer_time_format*
		Specify the output format of the last access time of
		|unite-source-buffer|.  Uses |strftime()| formatting.

		The default value is "(%Y/%m/%d %H:%M:%S) ".

g:unite_source_file_ignore_pattern	*g:unite_source_file_ignore_pattern*
		Note: This variable is deprecated.  Please use
		|unite#custom#source()| instead.

		Note: This variable must be set before using |unite|.

		Refer autoload/unite/sources/file.vim about the default value.

g:unite_source_file_mru_time_format
					*g:unite_source_file_mru_time_format*
		Specify the output format of the last access time of
		|unite-source-file_mru|. Uses |strftime()| formatting.

		The default value is "(%Y/%m/%d %H:%M:%S) ".

g:unite_source_file_mru_filename_format
				*g:unite_source_file_mru_filename_format*
		Specify the output format of the filename of
		|unite-source-file_mru|.  The format is same to
		|fnamemodify()|.  If this variable is empty, drawing speed
		is faster.

		The default value is ":~:.".

g:unite_source_file_mru_file			*g:unite_source_file_mru_file*
		Specifies the file to write the information of most recent
		used files.

		The default value is |g:unite_data_directory|; '/file_mru'

g:unite_source_mru_do_validate			*g:unite_source_mru_do_validate*
		Specify whether automatically remove invalid file paths from
		mru history.

		Effective for both file_mru and directory_mru

		The default value is 1

g:unite_source_mru_update_interval
					*g:unite_source_mru_update_interval*
		Specify the update interval to save updated mru
		files/directories to disk.

		Effective for both file_mru and directory_mru

		The default value is 600 (10 minutes)

g:unite_source_file_mru_limit			*g:unite_source_file_mru_limit*
		The number of recent file candidates to show in default
		file_mru window.

		The default value is 100.

g:unite_source_file_mru_long_limit
					*g:unite_source_file_mru_long_limit*
		The maximum number of most recent files to save.

		Refer to |unite-source-file_mru| for details.

		The default value is 1000.

		Note: The mru code has been optimized, you can set a large
		number like 5000 without impact the performance.

g:unite_source_file_mru_ignore_pattern
				*g:unite_source_file_mru_ignore_pattern*
		Refer autoload/unite/sources/file_mru.vim about the default
		value.

		Note: This function is deprecated.  Please use
		|unite#custom#source()| instead.

		Note: This variable must be set before using |unite|.

g:unite_source_directory_mru_time_format
				*g:unite_source_directory_mru_time_format*
g:unite_source_directory_mru_filename_format
				*g:unite_source_directory_mru_filename_format*
g:unite_source_directory_mru_file
				*g:unite_source_directory_mru_file*

		The default value is |g:unite_data_directory|; '/directory_mru'

g:unite_source_directory_mru_limit
				*g:unite_source_directory_mru_limit*

		The default value is 100.

g:unite_source_directory_mru_long_limit
				*g:unite_source_directory_mru_long_limit*

		Refer to |unite-source-file_mru| for details.

		The default value is 1000.

g:unite_source_directory_mru_ignore_pattern
				*g:unite_source_directory_mru_ignore_pattern*

		Same as |unite-source-file_mru| except that the
		targets are |unite-source-directory_mru|.

g:unite_source_bookmark_directory	*g:unite_source_bookmark_directory*
		Specify the directory where |unite-source-bookmark| writes
		its bookmarks.

		The default value is |g:unite_data_directory|; '/bookmark'.

g:unite_source_rec_ignore_pattern
					*g:unite_source_rec_ignore_pattern*
		Refer autoload/unite/sources/file_rec.vim about the default
		value.

		Note: This variable is deprecated.  Please use
		|unite#custom#source()| instead like the below.
>
		" before
		" let g:unite_source_file_rec_ignore_pattern = '\.abc$'
		" after
		call unite#custom#source('file_rec', 'ignore_pattern', '\.abc$')
<
		Note: This variable must be set before using |unite|.

				*g:unite_source_file_rec_ignore_pattern*
		Note: This variable is obsolete.

g:unite_source_rec_min_cache_files
					*g:unite_source_rec_min_cache_files*
		Specify the minimum number of files that
		|unite-source-file_rec| saves the caches.  Any cache isn't
		saved if the number of files is less than this value or this
		value is 0.

		The default value is 100.

				*g:unite_source_file_rec_min_cache_files*
		Note: This variable is obsolete.

g:unite_source_rec_max_cache_files
					*g:unite_source_rec_max_cache_files*
		Specify the maximum number of files that
		|unite-source-file_rec| saves the caches.

		The default value is 1000.

				*g:unite_source_file_rec_max_cache_files*
		Note: This variable is obsolete.

g:unite_source_rec_async_command
					*g:unite_source_rec_async_command*
		Specify the filelist command and arguments in file_rec/async
		source.

		The default value is "ag" or "find" and the args.

					*g:unite_source_file_rec_async_command*
		Note: This variable is obsolete.

		The default value is 1000.
g:unite_source_grep_command		*g:unite_source_grep_command*
		Set grep command.

		The default value is "grep".

g:unite_source_grep_recursive_opt
					*g:unite_source_grep_recursive_opt*
		Set grep recursive option.

		The default value is "-r".

g:unite_source_grep_default_opts
					*g:unite_source_grep_default_opts*
		Set the default options for grep.

		Note: grep output must match the pattern below.
		filename:number:pattern
>
		let g:unite_source_grep_default_opts = '-iRHn'
<
		The default value is "-Hn".

g:unite_source_grep_max_candidates
					*g:unite_source_grep_max_candidates*
		Set the max number of |unite-source-grep| candidates.

		The default value is 100.

g:unite_source_grep_ignore_pattern
					*g:unite_source_grep_ignore_pattern*
		Refer autoload/unite/sources/grep.vim about the default
		value.

		Note: This variable is deprecated.  Please use
		|unite#custom#source()| instead.

		Note: This variable must be set before using |unite|.

g:unite_source_grep_search_word_highlight
				*g:unite_source_grep_search_word_highlight*
		Specify the search word highlight.

		The default value is "Search".

g:unite_source_grep_encoding			*g:unite_source_grep_encoding*
		Set output encoding of grep command.

		The default value is "char".

g:unite_source_vimgrep_search_word_highlight
				*g:unite_source_vimgrep_search_word_highlight*
		Specify the search word highlight.

		The default value is "Search".

g:unite_source_vimgrep_ignore_pattern
				*g:unite_source_vimgrep_ignore_pattern*
		Refer autoload/unite/sources/vimgrep.vim about the default
		value.

		Note: This variable is deprecated.  Please use
		|unite#custom#source()| instead.

		Note: This variable must be set before using |unite|.

g:unite_source_find_command		*g:unite_source_find_command*
		Set find command.

		The default value is "find".

g:unite_source_find_max_candidates
					*g:unite_source_find_max_candidates*
		Set the max number of |unite-source-find| candidates.

		The default value is 100.

g:unite_source_find_ignore_pattern
					*g:unite_source_find_ignore_pattern*
		Refer autoload/unite/sources/find.vim for the default value.

		Note: This variable is deprecated.  Please use
		|unite#custom#source()| instead.

		Note: This variable must be set before using |unite|.

g:unite_source_line_enable_highlight
					*g:unite_source_line_enable_highlight*
		Control whether search keyword is highlighted in unite buffer.

		The default value is 1.

g:unite_source_line_search_word_highlight
				*g:unite_source_line_search_word_highlight*
		Highlight group applied to search keyword when
		|g:unite_source_enable_highlight| is true.

		The default value is "Search".

g:unite_source_alias_aliases			*g:unite_source_alias_aliases*
		Set |unite-source-alias| settings.  This variable is
		dictionary.  The key is an alias source name, and the value is
		a dictionary with following attributes.  Alias sources are
		copies of original sources.

		source			(String)	(Required)
		Base source name.

		args			(String)	(Optional)
		Set arguments automatically.

		description		(String)	(Optional)
		Description string.

		Example:
>
		let g:unite_source_alias_aliases = {
		      \   'test' : {
		      \     'source': 'file_rec',
		      \     'args': '~/',
		      \   },
		      \ }
<
		The default value is "{}".

g:unite_source_menu_menus			*g:unite_source_menu_menus*
		Set |unite-source-menu| settings.  This variable is
		dictionary.  The keys are menu names and the values are the
		following attributes.

		candidates	(List or Dictionary)	(Required)
		Menu candidates.  If candidates type is dictionary, keys are
		ignored, but you can refer in map attribute described below.

		command_candidates
				(List or Dictionary)	(Optional)
		Menu candidates for commands.
		If this is a Dictionary, the key is used for word.  The value
		is command name.
		If this is a List, the first item is used for word.  The
		second item is command name.

		map		(Function)		(Optional)
		If this attribute is given, candidates are results of
		map(key, value).

		description		(String)	(Optional)
		Description string.

		Example:
>
		let g:unite_source_menu_menus = {}
		let g:unite_source_menu_menus.test = {
		      \     'description' : 'Test menu',
		      \ }
		let g:unite_source_menu_menus.test.candidates = {
		      \   'ghci'      : 'VimShellInteractive ghci',
		      \ }
		function g:unite_source_menu_menus.test.map(key, value)
		  return {
		      \       'word' : a:key, 'kind' : 'command',
		      \       'action__command' : a:value,
		      \     }
		endfunction

		let g:unite_source_menu_menus.test2 = {
		      \     'description' : 'Test menu2',
		      \ }
		let g:unite_source_menu_menus.test2.command_candidates = {
		      \   'python'    : 'VimShellInteractive python',
		      \ }

		let g:unite_source_menu_menus.test3 = {
		      \     'description' : 'Test menu3',
		      \ }
		let g:unite_source_menu_menus.test3.command_candidates = [
		      \   ['ruby', 'VimShellInteractive ruby
		      \   ['python', 'VimShellInteractive python'],
		      \ ]

		nnoremap <silent> sm  :<C-u>Unite menu:test<CR>
<
		The default value is "{}".

g:unite_source_history_yank_enable
					*g:unite_source_history_yank_enable*
		If defined and not 0, unite enables
		|unite-source-history/yank|.

		Note: This value has to be set in .vimrc.

		This variable is not defined by default.

g:unite_source_history_yank_limit
					*g:unite_source_history_yank_limit*
		The maximum number of |unite-source-history/yank| to save.

		The default value is 100.

g:unite_source_history_yank_file
					*g:unite_source_history_yank_file*
		Specify the file to write the information of yank history.
		If this variable is empty, saving history is disabled.

		The default value is |g:unite_data_directory|; '/history_yank'

g:unite_source_process_enable_confirm
					*g:unite_source_process_enable_confirm*
		When this variable is 1 and a signal is sent to a process via
		|unite-source-process| such as KILL, Vim will ask you if you
		really want to do that.

		The default value is 1.

KIND VARIABLES					*unite-kind-variables*

g:unite_kind_jump_list_after_jump_scroll
				*g:unite_kind_jump_list_after_jump_scroll*
		Number of lines to adjust the cursor location after the
		jump via |unite-kind-jump_list|.  Valid range is 0 to 100,
		where 0 is the top of the window and 100 is the bottom of
		the window.

		value	meaning		equivalent command
		--------------------------------------
		0	Window top	normal! |z<CR>|
		50	Window centre	normal! |z.|
		100	Window bottom	normal! |z-|

		The default value is 25.

g:unite_kind_openable_persist_open_blink_time
			*g:unite_kind_openable_persist_open_blink_time*
		The amount of blink time after "persist_open" action from
		|unite-kind-openable|.

		The default value is "250m"

g:unite_kind_openable_cd_command
				*g:unite_kind_openable_cd_command*
		Specify the Vim command for cd action.
		This command must interpret |`=|.

		The default value is "cd".

g:unite_kind_openable_lcd_command
				*g:unite_kind_openable_lcd_command*
		Specify the Vim command for lcd action.
		This command must interpret |`=|.

		The default value is "lcd".

FILTER VARIABLES				*unite-filter-variables*

g:unite_converter_file_directory_width
				*g:unite_converter_file_directory_width*
		Specify the filename width.

		The default value is "45".

------------------------------------------------------------------------------
KEY MAPPINGS 					*unite-key-mappings*

Normal mode mappings.

<Plug>(unite_exit)				*<Plug>(unite_exit)*
		Exits unite.  And previous unite buffer menu will be restored.
		Note: You cannot close unite buffer using |:close| or
		|:bdelete| or |:quit| command.  This mapping restore windows.

<Plug>(unite_all_exit)				*<Plug>(unite_all_exit)*
		Exits unite with previous unite buffer menu.
		Note: You cannot close unite buffer using |:close| or
		|:bdelete| or |:quit| command.  This mapping restore windows.

<Plug>(unite_restart)				*<Plug>(unite_restart)*
		Restarts unite.

<Plug>(unite_do_default_action)		*<Plug>(unite_do_default_action)*
		Runs the default action of the default candidates.  The kinds
		of each candidates have their own defined actions.  See also
		|unite-kind| about kinds.  Refer |unite-default-action| about
		default actions.

<Plug>(unite_choose_action)			*<Plug>(unite_choose_action)*
		Runs the default action of the selected candidates.  The kinds
		of each candidates have their own defined actions.  Refer
		|unite-kind| about kinds.

<Plug>(unite_insert_enter)			*<Plug>(unite_insert_enter)*
		Starts inputting narrowing text from the cursor position.  In
		case when the cursor is not on prompt line, this moves the
		cursor into the prompt line automatically.

<Plug>(unite_insert_head)			*<Plug>(unite_insert_head)*
		Starts inputting narrowing text from the head of the line.  In
		case when the cursor is not on prompt line, this moves the
		cursor into the prompt line automatically.

<Plug>(unite_append_enter)			*<Plug>(unite_append_enter)*
		Starts inputting narrowing text from the right side of the
		cursor position.  In case when the cursor is not on prompt
		line, this moves the cursor into the prompt line
		automatically.

<Plug>(unite_append_end)			*<Plug>(unite_append_end)*
		Starts inputting narrowing text from the end of the line.  In
		case when the cursor is not on prompt line, this moves the
		cursor into the prompt line automatically.

<Plug>(unite_toggle_mark_current_candidate)
				*<Plug>(unite_toggle_mark_current_candidate)*
		Toggles the mark of the candidates in the current line.  You
		may run an action on multiple candidates at the same time by
		marking multiple candidates.

<Plug>(unite_toggle_mark_all_candidates)
				*<Plug>(unite_toggle_mark_all_candidates)*
		Toggles the mark of the candidates in the all lines.

<Plug>(unite_redraw)				*<Plug>(unite_redraw)*
		Without waiting for the update time defined in
		|g:unite_update_time|, Unite updates its view immediately.
		This is also used internally for updating the cache.

<Plug>(unite_rotate_next_source)	*<Plug>(unite_rotate_next_source)*
		Changes the order of source normally.

<Plug>(unite_rotate_previous_source)	*<Plug>(unite_rotate_previous_source)*
		Changes the order of source reversely.

<Plug>(unite_print_candidate)		*<Plug>(unite_print_candidate)*
		Shows the target of the action of the selected candidate.

<Plug>(unite_print_message_log)		*<Plug>(unite_print_message_log)*
		Shows the message log in current unite buffer.

<Plug>(unite_cursor_top)			*<Plug>(unite_cursor_top)*
		Moves the cursor to the top of the Unite buffer.

<Plug>(unite_cursor_bottom)			*<Plug>(unite_cursor_bottom)*
		Moves the cursor to the bottom of the Unite buffer.
		Note: This mapping redraw all candidates.

<Plug>(unite_loop_cursor_down)		*<Plug>(unite_loop_cursor_down)*
		Goes to the next line.  Goes up to the top when you are on the
		bottom.

<Plug>(unite_loop_cursor_up)		*<Plug>(unite_loop_cursor_up)*
		Goes to the previous line.  Goes down to the bottom when you
		are on the top.

<Plug>(unite_skip_cursor_down)		*<Plug>(unite_skip_cursor_down)*
		Goes to the next line.  But skips unmatched candidates.
		Goes up to top when you are on the bottom.

<Plug>(unite_skip_cursor_up)			*<Plug>(unite_skip_cursor_up)*
		Goes to the previous line.  But skips unmatched candidates.
		Goes down to the bottom when you are on the top.

<Plug>(unite_quick_match_default_action)
				*<Plug>(unite_quick_match_default_action)*
		Runs the default action of the selected candidate with using
		quick match.  This doesn't work when there are marked
		candidates.

<Plug>(unite_quick_match_choose_action)
				*<Plug>(unite_quick_match_choose_action)*
		Chooses an action of the selected candidate with using quick
		match.  This doesn't work when there are marked candidates.

<Plug>(unite_input_directory)		*<Plug>(unite_input_directory)*
		Narrows with inputting directory name.

<Plug>(unite_delete_backward_path)	*<Plug>(unite_delete_backward_path)*
		Deletes a path upward.  Refer to
		|i_<Plug>(unite_delete_backward_path)|.

<Plug>(unite_toggle_transpose_window)
				*<Plug>(unite_toggle_transpose_window)*
		Change the unite buffer's split direction.

<Plug>(unite_narrowing_path)			*<Plug>(unite_narrowing_path)*
		Narrowing candidates by candidate path(or word).

<Plug>(unite_narrowing_input_history)
				*<Plug>(unite_narrowing_input_history)*
		Narrowing candidates by input history.

<Plug>(unite_narrowing_dot)
				*<Plug>(unite_narrowing_dot)*
		Narrowing candidates by dot character.

<Plug>(unite_toggle_auto_preview)	*<Plug>(unite_toggle_auto_preview)*
		Toggles the unite buffer's auto preview mode.

<Plug>(unite_disable_max_candidates)	*<Plug>(unite_disable_max_candidates)*
		Disable the unite buffer's max_candidates.

<Plug>(unite_quick_help)			*<Plug>(unite_quick_help)*
		Views the mappings of the unite buffer.

<Plug>(unite_new_candidate)			*<Plug>(unite_new_candidate)*
		Add new candidate in cursor source.

Insert mode mappings.

<Plug>(unite_exit)				*i_<Plug>(unite_exit)*
		Exits Unite.

<Plug>(unite_insert_leave)			*i_<Plug>(unite_insert_leave)*
		Changes the mode into Normal mode and move the cursor to the
		first candidate line.

<Plug>(unite_delete_backward_char)	*i_<Plug>(unite_delete_backward_char)*
		Deletes a char just before the cursor, or quits the unite
		buffer.

<Plug>(unite_delete_backward_line)	*i_<Plug>(unite_delete_backward_line)*
		Deletes all chars after the cursor until the end of the line.

<Plug>(unite_delete_backward_word)	*i_<Plug>(unite_delete_backward_word)*
		Deletes a word just before the cursor.

<Plug>(unite_delete_backward_path)	*i_<Plug>(unite_delete_backward_path)*
		Deletes a path upward.
		For example doing <Plug>(unite_delete_backward_path) on >
		/Users/ujihisa/Desktop
<		or >
		/Users/ujihisa/Desktop/
<		this changes into >
		/Users/ujihisa
<		This is handy for changing file paths.

<Plug>(unite_select_next_line)		*i_<Plug>(unite_select_next_line)*
		Goes to the next candidate, or goes to the top from the
		bottom.

<Plug>(unite_select_previous_line)	*i_<Plug>(unite_select_previous_line)*
		Goes to the previous candidate, or goes to the bottom from the
		top.

<Plug>(unite_skip_next_line)		*i_<Plug>(unite_skip_next_line)*
		Goes to the next candidate but skips unmatched candidates.
		Or, goes to the top from the bottom.

<Plug>(unite_skip_previous_line)	*i_<Plug>(unite_skip_previous_line)*
		Goes to the previous candidate but skips unmatched candidates.
		Or, goes to the bottom from the top.

<Plug>(unite_select_next_page)		*i_<Plug>(unite_select_next_page)*
		Shows the next candidate page.

<Plug>(unite_select_previous_page)	*i_<Plug>(unite_select_previous_page)*
		Shows the previous candidate page.

<Plug>(unite_do_default_action)		*i_<Plug>(unite_do_default_action)*
		Same to |<Plug>(unite_do_default_action)|.

<Plug>(unite_toggle_mark_current_candidate)
				*i_<Plug>(unite_toggle_mark_current_candidate)*
		Same to |<Plug>(unite_toggle_mark_current_candidate)|.

<Plug>(unite_choose_action)		*i_<Plug>(unite_choose_action)*
		Same to |<Plug>(unite_choose_action)|.

<Plug>(unite_move_head)				*i_<Plug>(unite_move_head)*
		Goes to the top of the line.

<Plug>(unite_quick_match_default_action)
				*i_<Plug>(unite_quick_match_default_action)*
		Same to |<Plug>(unite_quick_match_default_action)|.

<Plug>(unite_quick_match_choose_action)
				*i_<Plug>(unite_quick_match_choose_action)*
		Same to |<Plug>(unite_quick_match_choose_action)|.

<Plug>(unite_input_directory)		*i_<Plug>(unite_input_directory)*
		Same to |<Plug>(unite_input_directory)|.

<Plug>(unite_toggle_selected_candidates)
				*i_<Plug>(unite_toggle_transpose_window)*
		Same to |<Plug>(unite_toggle_transpose_window)|.

<Plug>(unite_narrowing_path)		*i_<Plug>(unite_narrowing_path)*
		Same to |<Plug>(unite_narrowing_path)|.

<Plug>(unite_narrowing_input_history)
				*i_<Plug>(unite_narrowing_input_history)*
		Same to |<Plug>(unite_narrowing_input_history)|.

<Plug>(unite_toggle_auto_preview)	*i_<Plug>(unite_toggle_auto_preview)*
		Same to |<Plug>(unite_toggle_auto_preview)|.

<Plug>(unite_disable_max_candidates)
				*i_<Plug>(unite_disable_max_candidates)*
		Same to |<Plug>(unite_disable_max_candidates)|.

<Plug>(unite_redraw)				*i_<Plug>(unite_redraw)*
		Same to |<Plug>(unite_redraw)|.

<Plug>(unite_print_candidate)		*i_<Plug>(unite_print_candidate)*
		Same to |<Plug>(unite_print_candidate)|.

<Plug>(unite_print_message_log)		*i_<Plug>(unite_print_message_log)*
		Same to |<Plug>(unite_print_message_log)|.

<Plug>(unite_new_candidate)			*i_<Plug>(unite_new_candidate)*
		Same to |<Plug>(unite_new_candidate)|.

Visual mode mappings.

<Plug>(unite_toggle_mark_selected_candidates)
				*v_<Plug>(unite_toggle_selected_candidates)*
		Toggle marks in visual selected candidates.

						*unite_default_key_mappings*
Following keymappings are the default keymappings.

Normal mode mappings.
{lhs}		{rhs}
--------	-----------------------------
i		|<Plug>(unite_insert_enter)|
I		|<Plug>(unite_insert_head)|
a		In case when you selected a candidate,
		|<Plug>(unite_choose_action)|
		else |<Plug>(unite_append_enter)|
A		|<Plug>(unite_append_end)|
q		|<Plug>(unite_exit)|
Q		|<Plug>(unite_all_exit)|
<C-r>		|<Plug>(unite_restart)|
<Space>		|<Plug>(unite_toggle_mark_current_candidate)|
*		|<Plug>(unite_toggle_mark_all_candidates)|
M		|<Plug>(unite_disable_max_candidates)|
<Tab>		|<Plug>(unite_choose_action)|
<C-n>		|<Plug>(unite_rotate_next_source)|
<C-p>		|<Plug>(unite_rotate_previous_source)|
<C-g>		|<Plug>(unite_print_message_log)|
<C-l>		|<Plug>(unite_redraw)|
<C-h>		|<Plug>(unite_delete_backward_path)|
gg		|<Plug>(unite_cursor_top)|
G		|<Plug>(unite_cursor_bottom)|
j		|<Plug>(unite_loop_cursor_down)|
<Down>		|<Plug>(unite_loop_cursor_down)|
k		|<Plug>(unite_loop_cursor_up)|
<Up>		|<Plug>(unite_loop_cursor_up)|
J		|<Plug>(unite_skip_cursor_down)|
K		|<Plug>(unite_skip_cursor_up)|
?		|<Plug>(unite_quick_help)|
N		|<Plug>(unite_new_candidate)|
<CR>		In case when you selected a candidate, runs default action
b		In case when you selected a candidate, runs bookmark action
d		In case when you selected a candidate, runs delete action
e		In case when you selected a candidate, runs narrow action
t		In case when you selected a candidate, runs tabopen action
yy		In case when you selected a candidate, runs yank action
p		runs preview action
x		In case when you selected a candidate, runs
		|<Plug>(unite_quick_match_default_action)|
.		|<Plug>(unite_narrowing_dot)|

Insert mode mappings.
{lhs}		{rhs}
--------	-----------------------------
<ESC>		|i_<Plug>(unite_insert_leave)|
<Tab>		|i_<Plug>(unite_choose_action)|
<C-n>		|i_<Plug>(unite_select_next_line)|
<Down>		|i_<Plug>(unite_select_next_line)|
<C-p>		|i_<Plug>(unite_select_previous_line)|
<Up>		|i_<Plug>(unite_select_previous_line)|
<C-f>		|i_<Plug>(unite_select_next_page)|
<C-b>		|i_<Plug>(unite_select_previous_page)|
<CR>		|i_<Plug>(unite_do_default_action)|
<C-h>		|i_<Plug>(unite_delete_backward_char)|
<BS>		|i_<Plug>(unite_delete_backward_char)|
<C-u>		|i_<Plug>(unite_delete_backward_line)|
<C-w>		|i_<Plug>(unite_delete_backward_word)|
<C-a>		|i_<Plug>(unite_move_head)|
<Home>		|i_<Plug>(unite_move_head)|
<C-l>		|i_<Plug>(unite_redraw)|
<C-g>		|i_<Plug>(unite_exit)|
<Space>		In case when you selected a candidate,
		|i_<Plug>(unite_toggle_mark_current_candidate)|
<C-d>		runs delete action
<C-e>		runs edit action
<C-t>		runs tabopen action
<C-y>		runs yank action

Visual mode mappings.
{lhs}		{rhs}
--------	-----------------------------
<Space>		|v_<Plug>(unite_toggle_mark_selected_candidates)|

------------------------------------------------------------------------------
FUNCTIONS					*unite-functions*

CORE						*unite-functions-core*

unite#get_kinds([{kind-name}])			*unite#get_kinds()*
		Gets the kinds of {kind-name}.  Unless they exist, this
		returns an empty dictionary.  This returns a dictionary of
		that keys are kind names and values are the kinds when you
		skip giving {kind-name}.

		Note: Changing the return value is not allowed.

unite#get_sources([{source-name}])		*unite#get_sources()*
		Gets the loaded source of {source-name}.  Unless they exist,
		this returns an empty dictionary.  This returns a dictionary
		of that keys are source names and values are the sources when
		you skip giving {source-name}.  If you give {source-name} as
		dictionary, unite.vim use this source temporary.

		Note: Changing the return value is not allowed.

unite#get_unite_winnr({buffer-name})		*unite#get_unite_winnr()*
		Returns unite window number which has {buffer-name}.  If the
		window is not found, it will return -1.

unite#redraw([{winnr}])				*unite#redraw()*
		Redraw {winnr} unite window.  If you omit {winnr}, current
		window number will be used.

unite#force_redraw([{winnr}])			*unite#force_redraw()*
		Force redraw {winnr} unite window.  If you omit {winnr},
		current window number will be used.

CUSTOMS						*unite-functions-customs*

unite#start({sources}, [, {context}])		*unite#start()*
		Creates a new Unite buffer.  In case when you are already on a
		Unite buffer, the narrowing text is preserved.

		{sources} is a list of which elements are formatted as
		{source-name} or [{source-name}, {args}, ...].  You may
		specify multiple string arguments for {args} of {source-name}.

		Refer |unite-notation-{context}| about {context}.  If you
		skip a value, it uses the default value.

unite#start_complete({sources}, [{context}])	*unite#start_complete()*
		Returns the key sequence that opens unite buffer for
		completion.  This will be used with inoremap <buffer><expr>
		usually.
		Example:
>
		inoremap <buffer><expr> <C-l> unite#start_complete(
		\ ['vimshell/history'], {
		\ 'start_insert' : 0,
		\ 'input' : vimshell#get_cur_text()})
<
unite#get_candidates({sources}, [, {context}])	*unite#get_candidates()*
		Get a list of all candidates of sources.  Unite buffer is not
		created.  This function may not work in some sources.  The
		arguments feature is same to |unite#start()|.
		Note: max_candidates option of sources is ignored.

unite#action#do_candidates({action-name}, {candidates}, [, {context}])
						*unite#action#do_candidates()*
		Does {action-name} with {candidates}.  Unite buffer is not
		created.  This function may not work in some actions.
		Note: To get candidates, use |unite#get_candidates()|.

unite#get_context()				*unite#get_context()*
		Gets the context information of the current Unite buffer.
		This is used by functions like |unite#custom#action()| to call
		|unite#start()| internally.

unite#do_action({action-name})			*unite#do_action()*
		Returns the key sequence for running {action-name} action to
		the marked candidates.  This function works only when Unite
		has been already activated.  This causes a runtime error if
		{action-name} doesn't exist or the action is invalid.

		This is handy for defining a key mapping to run an action.

		This runs the default action when you specify "default" for
		{action-name}.

		This runs an action on the candidates of the current line or
		the top of the candidates when none of the candidates are
		marked.

		This is usually used as inoremap <buffer><expr> or
		nnoremap <buffer><expr>.  For example,
>
		nnoremap <silent><buffer><expr> <C-k> unite#do_action('preview')
>
unite#smart_map({narrow-map}, {select-map})	*unite#smart_map()*
		Returns the key sequence which works both modes of narrowing
		and selecting with respect to the given narrow-map and
		select-map.  Use this with |unite#do_action()|.  This will be
		used with inoremap <buffer><expr> or nnoremap <buffer><expr>
		usually.
		Example:
>
		inoremap <buffer><expr> ' unite#smart_map("'", unite#do_action('preview'))
<
unite#get_status_string()			 *unite#get_status_string()*
		Returns unite status string.  It is useful to custom
		statusline.

unite#mappings#set_current_filters({filters})
					*unite#mappings#set_current_filters()*
		Changes current unite buffer filters.
		Example:
>
  nnoremap <buffer><expr> S      unite#mappings#set_current_filters(
        \ empty(unite#mappings#get_current_filters()) ? ['sorter_reverse'] : [])
<
unite#mappings#get_current_filters()
					*unite#mappings#get_current_filters()*
		Gets current unite buffer filters.

unite#custom#profile({profile-name}, {option-name}, {value})
						*unite#custom#profile()*
						*unite#set_profile()*
		Set {profile-name} specialized {option-name} to {value}.
		Note: If you use single source in unite.vim commands with
		omitting profile name and buffer name, "source/{source-name}"
		is used.  So you can define source specific profile.

		These options below are available:

		substitute_patterns		(Dictionary)
		Specify substitute patterns.  The key is "pattern",
		"subst" and "priority".
		"pattern" is the replace target regexp and "subst" is the
		substitute string.  If you specify a same "pattern" again, the
		setting is just updated.  You may defeat "pattern" with giving
		"" to "subst".  "priority" prioritizes how this replaces.  If
		you skipped giving "priority" it is 0.  Give bigger number for
		a "pattern" which must be done earlier.
		Note: that the initial text of Unite buffer is not replaced
		with these values.

		You may mimic ambiguous matching with using this function.
>
		call unite#custom#profile('files', 'substitute_patterns', {
		      \ 'pattern' : '[^*]\ze[[:alnum:]]',
		      \ 'subst' : '\0*',
		      \ 'priority' : 100,
		      \ })
		call unite#custom#profile('files', 'substitute_patterns', {
		      \ 'pattern' : '[[:alnum:]]',
		      \ 'subst' : '\0',
		      \ 'priority' : 100,
		      \ })
<
		The former does ambiguous search within "/" while the latter
		does over it.

		The initial value is defined as the following; on a buffer of
		which profile_name is files, it adds a wildcard in order to
		match ~ as $HOME and to match "/" partially.
>
		call unite#custom#profile('files', 'substitute_patterns', {
		      \ 'pattern' : '^\~',
		      \ 'subst' : substitute(
		      \     unite#util#substitute_path_separator($HOME),
		      \           ' ', '\\\\ ', 'g'),
		      \ 'priority' : -100,
		      \ })
		call unite#custom#profile('files', 'substitute_patterns', {
		      \ 'pattern' : '\.\{2,}\ze[^/]',
		      \ 'subst' : "\\=repeat('../', len(submatch(0))-1)",
		      \ 'priority' : 10000,
		      \ })
<
		If {subst} is a list, Unite searches by some narrowing texts.
		Note: It is only once to be replaced with a list.
>
		call unite#custom#profile('files', 'substitute_patterns', {
		      \ 'pattern' : '^\.v/',
		      \ 'subst' : [expand('~/.vim/'),
		      \   unite#util#substitute_path_separator($HOME)
		      \       . '/.bundle/*/'],
		      \ 'priority' : 1000,
		      \ })
<

		filters				(List)
		Specify a list of filter names.  The filters are called after
		combining all candidates.  If you change filters dynamically,
		use |unite#mappings#set_current_filters()| instead.

		ignorecase			(Number)
		Specify 'ignorecase' value in unite buffer.  If it is
		omitted, global 'ignorecase' value is used.
		Note: If profile_name is "files", the default value "1" is
		used.

		smartcase			(Number)
		Specify 'smartcase' value in unite buffer.  If it is omitted,
		global 'smartcase' value is used.
		Note: If profile_name is "files", the default value "0" is
		used.

		context				(Dictionary)
		Specify default {context} value in unite buffer.
		You can custom the context in unite buffer.
		Note: In temporary unite buffer and script created unite
		buffer, the context overwrites current context instead of
		default context.

		Example:
>
		" Start insert mode in unite-action buffer.
		call unite#custom#profile('action', 'context',
		\ {'start_insert' : 1})
		" Set "-no-quit" automatically in grep unite source.
		call unite#custom#profile('source/grep', 'context',
		\ {'no_quit' : 1})
<
unite#custom#substitute({profile-name}, {pattern}, {subst} [, {priority}])
					*unite#custom#substitute()*
		Specify a replace pattern of narrowing text for a Unite buffer
		of which name is {profile-name}.
		Note: This is wrapper function for backward compatibility.

unite#custom#default_action({kind}, {default-action})
					*unite#custom_default_action()*
					*unite#custom#default_action()*
		Changes the default action of {kind} into {default-action}.
		You may specify multiple {kind} with separating ",".  For
		Example:
>
		call unite#custom#default_action('file', 'tabopen')
<
unite#custom#action({kind}, {name}, {action})
						*unite#custom#action()*
						*unite#custom_action()*
		Adds an {action} of which name is {name} for {kind}.
		You may specify multiple {kind} with separating ",".
		For example:
>
		let my_tabopen = {
		\ 'is_selectable' : 1,
		\ }
		function! my_tabopen.func(candidates)
		  call unite#take_action('tabopen', a:candidates)
		
		  let dir = isdirectory(a:candidate.word) ?
		  \    a:candidate.word : fnamemodify(a:candidate.word, ':p:h')
		  execute g:unite_kind_openable_lcd_command '`=dir`'
		endfunction
		call unite#custom#action('file,buffer', 'tabopen', my_tabopen)
		unlet my_tabopen
<
unite#custom#alias({kind}, {name}, {action})
						*unite#custom#alias()*
						*unite#custom_alias()*
		Defines an action of {name} which is another name of {action}
		in {kind}.  You may specify multiple {kind} with separating
		",".  If {action} is "nop", such action is disabled.
		example:
>
		call unite#custom#alias('file', 'h', 'left')
<
unite#custom_filters({source-name}, {filters})
						*unite#custom_filters()*
		Note: This function is deprecated.  Please use
		|unite#custom#source()| instead.

unite#custom_max_candidates({source-name}, {max})
					*unite#custom_max_candidates()*
		Note: This function is deprecated.  Please use
		|unite#custom#source()| instead.

unite#custom#source({source-name}, {option-name}, {value})
						*unite#custom#source()*
						*unite#custom_source()*
		Set {source-name} source specialized {option-name} to {value}.
		You may specify multiple sources with separating "," in
		{source-name}.

		These options below are available:

		filters				(List)
		Specify a list of filter names.  The filters overwrite source
		default filters.

		matchers			(List) or (String)
		Specify a list of matcher names.  The filters overwrite source
		default matchers.

		sorters				(List) or (String)
		Specify a list of sorter names.  The filters overwrite source
		default sorters.

		converters			(List) or (String)
		Specify a list of converter names.  The filters overwrite
		source default converters.

		max_candidates			(Number)
		Changes the max candidates into {value}.  If {value} is 0, all
		candidates is displayed.

		ignore_pattern			(String)
		Specify the regexp pattern to ignore candidates of the source.
		This applies on the path or word attribute of candidates.
		Regardless of |g:unite_enable_ignore_case| value, it's case
		sensitive.

		variables			(Dictionary)
		Changes the source custom variables.  The variables are depends
		on sources.

unite#take_action({action-name}, {candidate})
						*unite#take_action()*
		Runs an action {action-name} against {candidate}.  This will
		be mainly used in |unite#custom#action()|.  When the action is
		is_selectable, the {candidate} will be automatically converted
		into a list.

unite#take_parents_action({action-name}, {candidate}, {extend-candidate})
						*unite#take_parents_action()*
		Same to |unite#take_action()| but searches the parents' action
		table with combining {extend-candidate} on {candidate}.  This
		is handy for reusing parents' actions.

unite#define_source({source})			*unite#define_source()*
		Adds {source} dynamically.  See also |unite-create-source|
		about the detail of source.  If a source with the same name
		exists, that is overwritten.

unite#define_kind({kind})			*unite#define_kind()*
		Adds {kind} dynamically.  See also |unite-create-kind| about
		the detail of kind.  If a kind with the same name exists, that
		is overwritten.

unite#define_filter({filter})			*unite#define_filter()*
		Adds {filter} dynamically.  See also |unite-create-filter|
		about the detail of filter.  If a filter with the same name
		exists, that is overwritten.

unite#undef_source({name})			*unite#undef_source()*
		Removes the source with a name of {name} that was added by
		|unite#define_source()|.  If such a source doesn't exist, this
		function does nothing.

unite#undef_kind({name})			*unite#undef_kind()*
		Removes the kind with a name of {name} that was added by
		|unite#define_kind()|.  If such a kind doesn't exist, this
		function does nothing.

unite#undef_filter({name})			*unite#undef_filter()*
		Removes the filter with a name of {name} that was added by
		|unite#define_filter()|.  If such a filter doesn't exist,
		this function does nothing.

unite#filters#matcher_default#use({matchers})
					*unite#filters#matcher_default#use(()*
		Changes the default match used by
		|unite-filter-matcher_default| into {matchers}.
		{matchers} must be specified with a list of matcher names.

unite#filters#sorter_default#use({sorters})
					*unite#filters#sorter_default#use(()*
		Changes the default sorter used by
		|unite-filter-sorter_default| into {sorters}.
		{sorters} must be specified with a list of sorter names.

					*unite#filters#converter_default#use(()*
unite#filters#converter_default#use({converters})
		Changes the default converter used by
		|unite-filter-converter_default| into {converters}.
		{converters} must be specified with a list of converter names.

------------------------------------------------------------------------------
OPTIONS						*unite-options*

{options} are options for a unite buffer.  You may give the following
parameters for an option.  You need to escape spaces with "\".

Note: In unite.vim, options converts to a context dictionary.
The "-buffer-name" option is same to "buffer_name" key in context.

						*unite-options-buffer-name*
		-buffer-name={buffer-name}
		Specify a buffer name. The default buffer name is "default".
		Note: Buffer name must not contain any spaces.

						*unite-options-profile-name*
		-profile-name={profile-name}		(String)
		Specify a profile name.  The default profile name is same to
		buffer name.  But if you use single source and omit buffer
		name, "source/{source-name}" is used.  So you can define source
		specific profile.

						*unite-options-input*
		-input={input-text}
		Specify an initial narrowing text.  The default value is ''.

						*unite-options-prompt*
		-prompt={prompt-text}
		Specify a prompt.  The default value is '> '.

						*unite-options-default-action*
		-default-action={default-action}
		Specify a default action.  The default value is 'default'.

					*unite-options-start-insert*
					*unite-options-no-start-insert*
		-start-insert
		Opens a unite buffer in the narrowing mode.

		-no-start-insert
		Opens a unite buffer in the normal mode.

		When both options are undefined, it depends on
		|g:unite_enable_start_insert| option.
		The behavior is undefined when both options are defined.

						*unite-options-no-quit*
		-no-quit
		Doesn't close unite buffer after firing an action.  Unless you
		specify it, a unite buffer gets closed when you selected an
		action which is "is_quit".

						*unite-options-keep-focus*
		-keep-focus
		Keep the focus on a unite buffer after firing an action.
		Note: This option is used with "-no-quit" option.

						*unite-options-winwidth*
		-winwidth={window-width}
		Specify the width of a unite buffer.  Unless you specify
		it, |g:unite_winwidth| is used.

						*unite-options-winheight*
		-winheight={window-height}
		Specify the height of a unite buffer.  Unless you specify
		it, |g:unite_winheight| is used.

						*unite-options-immediately*
		-immediately
		If the number of candidates is exactly one, it runs default
		action immediately.  If candidate is empty, it doesn't open any
		unite buffer.

						*unite-options-no-empty*
		-no-empty
		If candidate is empty, it doesn't open any unite buffer.

						*unite-options-auto-preview*
		-auto-preview
		When you selected a candidate, it runs "preview" action
		automatically.
						*unite-options-auto-highlight*
		-auto-highlight
		When you selected a candidate, it runs "highlight" action
		automatically.

						*unite-options-complete*
		-complete
		Uses unite completion interface. |unite-options-col| is also
		required.

						*unite-options-col*
		-col={column-number}
		Specify the called unite buffer position.

						*unite-options-vertical*
		-vertical
		Splits unite window vertically. |g:unite_winwidth| is used.

						*unite-options-horizontal*
		-horizontal
		Splits unite window horizontally.

		When both options are undefined, it depends on
		|g:unite_enable_split_vertically| option.
		The behavior is undefined when both options are defined.

						*unite-options-direction*
		-direction={direction}
		Defines split position rule.  The default value is the same to
		|g:unite_split_rule|.

						*unite-options-no-split*
		-no-split
		No split unite buffer and no resize window.

						*unite-options-verbose*
		-verbose
		Print verbose warning messages.

						*unite-options-auto-resize*
		-auto-resize
		Auto resize unite buffer height by candidates number.

						*unite-options-toggle*
		-toggle
		Close unite buffer window if one of the same buffer name
		exists.

						*unite-options-quick-match*
		-quick-match
		Start in the quick match mode.

						*unite-options-create*
		-create
		Create a new unite buffer.

						*unite-options-update-time*
		-update-time={new-update-time}
		Change 'updatetime' option.  If this option is omitted,
		|g:unite_update_time| is used.  This option is useful for
		animation source.

					*unite-options-cursor-line-highlight*
		-cursor-line-high-light={highlight-name}
		Change cursor line highlight.  If this option is omitted,
		|g:unite_cursor_line_highlight| is used.

						*unite-options-no-cursor-line*
		-no-cursor-line
		Disable cursor line highlight.  This option is useful for
		animation source.

					*unite-options-hide-source-names*
		-hide-source-names
		Hides source names.
		Note: Source highlight will be overwritten by other sources.

					*unite-options-hide-status-line*
		-hide-status-line
		Nothing.
		Note: This option is obsolete.

					*unite-options-max-multi-lines*
		-max-multi-lines={max-lines}
		Specify the lines max in multiline candidates.  If this option
		is omitted, "5" is used.

						*unite-options-here*
		-here
		Open unite buffer at the cursor position.
		Note: This option is disabled if "-vertical" or "-no-split"
		option is on.

						*unite-options-silent*
		-silent
		Shuts messages up in unite buffer.

						*unite-options-auto-quit*
		-auto-quit
		Closes unite buffer automatically when all candidates are
		shown.

						*unite-options-no-focus*
		-no-focus
		No the focus on the unite buffer after opening a unite buffer.

					*unite-options-short-source-names*
		-short-source-names
		Use short source names.

					*unite-options-long-source-names*
		-long-source-names
		Use long source names.

						*unite-options-multi-line*
		-multi-line
		Force use multi line.  If candidate abbr is too long, unite.vim
		will fold automatically.

						*unite-options-resume*
		-resume
		Reuse previous buffer if exists.  Cf: |:UniteResume|

						*unite-options-wrap*
		-wrap
		If it is set, lines longer than the width of the window will
		wrap and displaying continues on the next line.
		Note: This option will set 'wrap' option and disable
		|unite-options-multi-line| option.

						*unite-options-select*
		-select={select-candidate-index}
		If it is set, unite will select specified candidate.
		Note: The candidate index is 0-origin.

						*unite-options-log*
		-log
		Enable log mode.  In log mode, cursor move to bottom
		automatically.

						*unite-options-truncate*
		-truncate
		If it is set, lines longer than the width of the window will
		truncate candidate abbr.

						*unite-options-tab*
		-tab
		Open new unite buffer by new tabpage.

==============================================================================
SOURCES						*unite-sources*

						*unite-source-file*
file		Nominates an input file as a candidate.
		Note: This source doesn't nominate files in the parent
		directory (Example: "../") or hidden files(Example:
		".gitignore").  If you want to open these files, please input
		".".

		Source arguments:
		1. the file/directory path.

						*unite-source-file/new*
file/new	Nominates a new input file as a candidate.

						*unite-source-file_mru*
file_mru	Nominates files you used recently as candidates, ordering
		by time series.

		For file_mru and directory_mru source, two lists are
		maintained

		1. short list for quick start; |g:unite_source_file_mru_limit|
		2. long list for tracking mru history.
		|g:unite_source_file_mru_long_limit|

		Normally, only the short list are shown in the unite window.
		To load the long list  Hit the key associated with
		|<Plug>(unite_redraw)| to trigger the unite redraw event.

		Or, you can start file_mru/directory_mru with argument
		including `*`, `_`, or `all`, `long`

		For example, `Unite file_mru:long`
		
		The mru code is overhauled to tracking long mru history.
		Set a large number like 5000 for the long limit will not
		impact vim performance.

						*unite-source-file_rec*
file_rec	Gather files recursive and nominates all directory or file
		names under the search directory(argument 1) or the current
		directly(if argument is omitted) as candidates.  This may get
		Vim frozen when there are too many candidates.  The candidates
		are cached by file_rec source.  To clear cache, use
		|<Plug>(unite_redraw)| keymapping.
		If argument 1 is "!", use the project directory instead of
		the current directory.  The project directory has ".git", ".svn",
		".hg".
		Note: If you edit file by Vim, file_rec source will update
		cache file.
		Note: If the candidates are over 1000, it will disable make
		cache.
		Note: If you input |<Plug>(unite_restart)|, you can change
		search directory.

		Source arguments:
		1. the search directory.

						*unite-source-file_rec/async*
file_rec/async	Same as |unite-source-file_rec|, but get files asynchronously.
		Note: This source requires vimproc.
		Note: This source requires "ag" or "find" command.
		Note: Windows "find" command is not supported.
		Note: If you edit file by Vim, file_rec/async source will
		update cache file.
		Note: If the candidates are over
		|g:unite_source_file_rec_max_cache_files|, it will disable
		make cache.

		Source arguments:
		1. the search directory.

						*unite-source-directory*
directory	Nominates an input directory as a candidate.
		Note: This source doesn't nominate the parent
		directory(Example: "../") or hidden directories(Example:
		".git").  If you want to open this directories, please input
		".".

						*unite-source-directory/new*
directory/new	Nominates a new input directory as a candidate.

						*unite-source-directory_mru*
directory_mru	Nominates directories you used recently as candidates,
		ordering by time series.

		Refer to |unite-source-file_mru|

						*unite-source-buffer*
buffer		Nominates opened buffers as candidates, ordering by time
		series.
		If argument 1 is "!", both listed and non-listed buffer are
		displayed.
		If argument 1 is "?", non-listed buffer is displayed.

		Source arguments:
		1. "!" or "?".

						*unite-source-buffer_tab*
buffer_tab	Nominates opened buffers only in the current tab as
		candidates, ordering by time series.
		Argument specification is same to buffer source.

		Source arguments:
		1. "!" or "?".

						*unite-source-tab*
tab		Nominates opened tabs as candidates, regarding t:cwd as the
		current directory and t:title as the title of the tab.  This
		requires |gettabvar()|.

		If t:title exists, this is used as "word" for narrowing.
		Otherwise, the buffer name of the current tab is used.

		Source arguments:
		1. "no-current" removes current tab from candidates.

						*unite-source-register*
register	Nominates the strings stored in registers as candidates.

						*unite-source-bookmark*
bookmark	Nominates files or directories you bookmarked as candidates.
		If source arguments are omitted, "default" bookmark file name
		is used.

		Source arguments:
		1. Bookmark file name.
		use `_` to load from all bookmark files
		use `*` to glob

						*unite-source-source*
source		Nominates Unite source names themselves as candidates.
		If arguments are given, arguments source names are listed.
		If no arguments are given, all source names are listed.

		Source arguments:
		1. source name 1
		2. source name 2
		...
		n. source name n

		Runs |unite#start()| with the selected source name, using the
		current Unite buffer context.

						*unite-source-window*
window		Nominates opened windows as candidates, ordering by time
		series.

		Source arguments:
		1. "no-current" removes current window from candidates.

						*unite-source-output*
output		Nominates executed Vim command as candidates.

		Source arguments:
		1. Vim command.

						*unite-source-command*
command		Nominates Vim Ex commands as candidates.
		Note: To gather Vim internal commands, unite.vim uses
		|neocomplcache| functions.

						*unite-source-function*
function	Nominates functions as candidates.
		Note: To gather Vim internal functions, unite.vim uses
		|neocomplcache| functions.

						*unite-source-mapping*
mapping		Nominates Vim mappings as candidates.

		Source arguments:
		1. Buffer number.

						*unite-source-grep*
grep		Nominates "grep" command output as candidates.
		Note: This source is created by Sixeight.

		Note: This source requires vimproc.  Please install.
		http://github.com/Shougo/vimproc

		Source arguments:
		1. the target directory.
		2. "grep" options.
		3. the narrowing pattern.
		Max candidates: |g:unite_source_grep_max_candidates|

		Special Target:
		%         : Current buffer name
		#         : Alternate buffer name
		$buffers  : All buffer names

		Source variables:
		command                : grep command name
		default_opts           : default grep options
		recursive_opt          : grep recursive options
		search_word_highlight  : search word highlight

		Example:
>
	:Unite grep:~/.vim/autoload/unite/sources:-iR:file
<
		Settings Example:
>
	let g:unite_source_grep_max_candidates = 200
	
	if executable('ag')
	  " Use ag in unite grep source.
	  let g:unite_source_grep_command = 'ag'
	  let g:unite_source_grep_default_opts = '--nocolor --nogroup --hidden'
	  let g:unite_source_grep_recursive_opt = ''
	elseif executable('ack-grep')
	  " Use ack in unite grep source.
	  let g:unite_source_grep_command = 'ack-grep'
	  let g:unite_source_grep_default_opts = '--no-heading --no-color -a'
	  let g:unite_source_grep_recursive_opt = ''
	endif
<
						*unite-source-vimgrep*
vimgrep		Nominates |vimgrep| command output as candidates.
		This source is slower than |unite-source-grep|, but it can
		recognize file encodings.
		Note: The source clears quickfix list.

		Source arguments:
		1. the target directory.
		2. the narrowing pattern.

						*unite-source-find*
find		Nominates "find" command output as candidates.

		Note: This source requires vimproc.  Please install.
		http://github.com/Shougo/vimproc

		Note: Windows "find" command is not supported.
		Please install UNIX Tools find for Windows.

		Source arguments:
		1. the target directory.
		2. "find" options.
		Max candidates: |g:unite_source_find_max_candidates|

						*unite-source-line*
line		Nominates current buffer lines as candidates.
		Note: This source is created by t9md.

		Source arguments:
		1. the search direction. "all" or "forward" or "backward".
		Max candidates: 100

		Example:
>
	nnoremap <silent> /  :<C-u>Unite -buffer-name=search line -start-insert -no-quit<CR>
<
						*unite-source-line/fast*
line/fast	Nominates current buffer lines as candidates.
		This source is created for big line files(over 10000 lines).
		It filters candidates automatically.
		Note: You cannot change the matcher in it.

		Source arguments:
		1. the search direction. "all" or "forward" or "backward".
		Max candidates: 100

		Example:
>
	nnoremap <silent> /  :<C-u>Unite -buffer-name=search line/fast -start-insert -no-quit<CR>
<
						*unite-source-jump*
jump		Nominates results of |:jumps| command as candidates.

						*unite-source-change*
change		Nominates results of |:changes| command as candidates.

						*unite-source-jump_point*
jump_point	Nominates current line of "file:line" format as candidates.
		This source is useful for |vimshell| outputs.

						*unite-source-file_point*
file_point	Nominates filename or URI at the cursor as candidates.
		This source is useful for |vimshell| outputs.

						*unite-source-launcher*
launcher	Nominates executable files from $PATH as candidates.

		Source arguments:
		1. comma separated executable files' path.

						*unite-source-alias*
alias		Creates alias source copied from original source.
		This source is dummy.  To create alias source, please refer to
		|g:unite_source_alias_aliases|.
		Note: This source is created by tacroe.

						*unite-source-menu*
menu		Nominates menus.
		If arguments is not given, all menu names are nominated.
		To create menus, please refer to
		|g:unite_source_menu_menus|.

		Source arguments:
		1. menu name.

						*unite-source-history/yank*
history/yank	Nominates yanked words.
		Note: It ignores too long yanked words.
		To use this source, set
		|g:unite_source_history_yank_enable| is 1.
		Note: This source is disabled when
		|g:unite_source_history_yank_enable| is 0 or not defined.

						*unite-source-process*
process		Nominates processes.
		Note: This source is required "ps" command or "tasklist"
		command(in Windows).

						*unite-source-runtimepath*
runtimepath	Nominates runtimepath directories.

						*unite-source-undo*
undo		Nominates undo list.

==============================================================================
KINDS						*unite-kinds*

						*unite-kind-common*
common		A kind for common actions.  Almost all kinds inherit this
		common implicitly.  This only requires word key.

						*unite-kind-openable*
openable	An interface that can open.  This doesn't require any keys,
		but a kind that inherits this requires open action.

						*unite-kind-cdable*
cdable		An interface that can change the working directory.

			action__directory	(String)	(Required)
				The target directory.

						*unite-kind-file*
file		An interface for files.  This kind inherits cdable, uri
		and openable, so this requires kinds that they require.

			action__path		(String)	(Required)
				The path of the target directory.

						*unite-kind-buffer*
buffer		An interface for buffers.  This kind inherits file, so
		this requires keys that it requires.

			action__buffer_nr	(String		(Required)
				The number of the target buffer.

						*unite-kind-tab*
tab		An interface for tabs.  If you can use |gettabvar()|, since
		this kind inherits cdable, this requires keys that those kind
		require.

			action__tab_nr		(String)	(Required)
				The number of the tab.

						*unite-kind-directory*
directory	An interface for directories.  This kind inherits file,
		this requires keys it requires.

						*unite-kind-word*
word		A String that can be inserted.

			word			(String)	(Required)
				The string you want to insert.

						*unite-kind-jump_list*
jump_list	An interface for jumping to the file position.  This kind
		inherits openable, so this requires that it requires.
		Note: The action__path or action__buffer_nr is required.

			action__path		(String)	(Required)
				The path of the file that you'll jump into.

			action__buffer_nr	(String)	(Required)
				The buffer number of the buffer that you'll
				jump into.

			action__line		(Number)	(Optional)
				The line number in the file you'll jump into.

			action__col		(Number)	(Optional)
				The column number in the file you'll jump
				into.

			action__pattern		(String)	(Optional)
				The search pattern after the file is opened.

			action__signature	(String)	(Optional)
				In case you cannot assume the uniqueness of
				where you'll jump into only by the pattern of
				action__pattern and action__line, a unique
				String to distinguish lines that match same
				pattern.

		About action__signature and calc_signature() function

		A source which specifies action__signature must define
		cals_signature() function for calculating the signature by the
		line number of the buffer.  calc_signature() receives {lnum}
		as the first argument and returns a signature in String, where
		{lnum} is a line number.  jump_list compares signatures with
		calling this function.

		The below is an example.
>
		function! s:source.calc_signature(lnum)
		  let range = 2
		  let from = max([1, a:lnum - range])
		  let to   = min([a:lnum + range, line('$')])
		  return join(getline(from, to))
		endfunction
<
						*unite-kind-command*
command		An interface for Ex commands of Vim.

			action__command		(String)	(Required)
				The command to run.

						*unite-kind-window*
window		An interface for Windows of Vim.
		This kind inherits cdable, so this requires keys that it
		requires.

			action__window_nr	(String)	(Required)
				The target window number.

						*unite-kind-completion*
completion	An interface for completion.

			action__complete_word	(String)	(Required)
				The completion word.

			action__complete_pos	(Number)	(Required)
				The completion position.

			action__complete_info	(String)	(Optional)
				The completion information.

						*unite-kind-source*
source		unite.vim source
		If this kind candidate is executed, unite.vim starts unite
		session in current unite buffer.  When you close unite buffer,
		sources are restored.  So, unite.vim behaves like menu.

			action__source_name	(String)	(Required)
				The source name.

			action__source_args	(List)		(Optional)
				The source arguments.

						*unite-kind-uri*
uri		Files and protocols.

			action__path		(String)	(Required)
				The file uri.
				If it is omitted, "action__path" is used.

						*unite-kind-guicmd*
guicmd		GUI executable commands.

			action__path		(String)	(Required)
				The command path.

			action__args		(List)		(Optional)
				The command args.

==============================================================================
FILTERS						*unite-filters*

						*unite-filter-default*
default		This default filter is used unless specified explicitly.
		This filter is a dummy with ["matcher_context",
		"sorter_nothing", "converter_nothing"] registered initially.
		This filter can be changed by calling
		|unite#filters#default#use()|.

						*unite-filter-matcher_default*
matcher_default	The default matcher used by |unite-filter-default| with
		["matcher_context"] set initially.
		This can be changed by calling
		|unite#filters#matcher_default#use()|.

						*unite-filter-matcher_glob*
matcher_glob	A matcher which filters the candidates with user given
		glob pattern.  This recognizes "*" as wild card and "!" as
		negative.  Narrowing down can be done by word.

						*unite-filter-matcher_regexp*
matcher_regexp	A matcher which filters the candidates with user given
		regular expression.  This recognizes "!" as negative.
		Narrowing down can be done by word.

						*unite-filter-matcher_fuzzy*
matcher_fuzzy	A matcher which filters the candidates with user given fuzzy
		string.
		This recognizes "!" as negative.
		Narrowing down can be done by word.
		Note: that narrowing down might be slower if this matcher is
		used.
		This matcher may produce the best effect if set as
		|unite-source-file_rec|.
>
		call unite#custom#source('file,file/new,buffer,file_rec',
		\ 'matchers', 'matcher_fuzzy')
<
						*unite-filter-matcher_migemo*
matcher_migemo	For Japanese migemo filter.
>
		call unite#custom#source('line', 'matchers', 'matcher_migemo')
<
				*unite-filter-matcher_hide_hidden_files*
matcher_hide_hidden_files
		Hide hidden files filter.  If your input contains ".", hidden
		files will be appeared.

						*unite-filter-matcher_context*
matcher_context	A matcher which filters the candidates with user given glob
		pattern or regexp pattern.  In default, use glob pattern.  If
		the pattern starts "^", will use regexp pattern(head match).
		Note: The filter is created by hrsh7th.

						*unite-filter-sorter_default*
sorter_default	The default sorter used by |unite-filter-default|.
		["sorter_nothing"] is set initially.
		This default sorter can be changed by calling
		|unite#filters#sorter_default#use()|.

						*unite-filter-sorter_nothing*
sorter_nothing	Nothing sorter.

						*unite-filter-sorter_word*
sorter_word	Compare word sorter.

						*unite-filter-sorter_length*
sorter_length	Compare length sorter.

						*unite-filter-sorter_rank*
sorter_rank	Matched rank order sorter.  The higher the matched word is or
		the longer the matched length is, the higher the rank is.
		This sorter is useful for file candidate source.
>
		call unite#custom#source('buffer,file,file_mru,file_rec',
		\ 'sorters', 'sorter_rank')
<
						*unite-filter-sorter_reverse*
sorter_reverse	Reverse order sorter.

					*unite-filter-converter_default*
converter_default
		The default converter used by |unite-filter-default|.
		["converter_nothing"] is set initially.
		This default converter can be changed by calling
		|unite#filters#converter_default#use()|.

					*unite-filter-converter_nothing*
converter_nothing
		This converter is dummy.

					*unite-filter-converter_relative_word*
converter_relative_word
		A converter which converts a candidate's word into a
		corresponding relative path.
		word can be used by matcher to narrow down the candidates and
		must be set in precedence of the matcher.
		If context information contains source__directory, this
		converter uses it as the base path in relative path
		conversion.
>
		call unite#custom#source('file_rec', 'filters',
		\ ['converter_relative_word', 'matcher_default',
		\  'sorter_default', 'converter_relative_abbr'])
<
					*unite-filter-converter_relative_abbr*
converter_relative_abbr
		A converter which converts a candidate's abbr into a
		corresponding relative path.
		Specification of this term is almost the same as
		|unite-filter-converter_relative_word|.

					*unite-filter-converter_tail*
converter_tail
		A converter which converts a candidate's word into the
		tail of the filename.

					*unite-filter-converter_file_directory*
converter_file_directory
		A converter which separates file and directory.

==============================================================================
ACTIONS						*unite-actions*

Actions of each kinds

common						*unite-action-common*
Defines the common interface for all kinds.  It uses candidate.word
internally.
	nop		Do nothing.
	yank		Yank the candidate "word" or "action__text".
	yank_escape	Yank the escaped candidate "word" or "action__text".
	ex		Input the escaped candidate text into command line.
	insert		Input the candidate word or text into the current
			buffer.
	insert_directory
			Input the candidate directory into the current buffer.
	preview		Preview the candidate text.
	echo		Echo candidates for debug.

openable					*unite-action-openable*
Defines an interface for files that can be opened.  It requires an inheriting
kind to define "open" action.
	tabopen		Open the file in a new tab.
	tabdrop		Open the file by the ":tab drop" command.
	split		Open the file, splitting horizontally.
	vsplit		Open the file, splitting vertically.
	left		Open the file in the left, splitting vertically.
	right		Open the file in the right, splitting vertically.
	above		Open the file in the top, splitting horizontally.
	below		Open the file in the bottom, splitting horizontally.
	persist_open	Open the file in alternate window.  unite window
			isn't closed.

cdable						*unite-action-cdable*
Defines an interface for files you can move to with cd command.
	cd		Change the current directory.
	lcd		Change the current directory of the current window.
	project_cd	Look for the project directory, and change the
			current directory to it.
	tabnew_cd	Open a new tab page and change the current
			directory to it.
	narrow		Narrow down candidates by the directory name.
			Note: This action makes a temporary buffer.  To leave
			the temporary buffer directly, you must use
			|<Plug>(unite_all_exit)|.
	vimshell	Run |vimshell| on the directory.  This is available
			only when |vimshell| is installed.
	tabvimshell	Run |:VimShellTab| on the directory.  This is
			available only when |vimshell| is installed.
	vimfiler	Run |vimfiler| on the directory.  This is available
			only when |vimfiler| is installed.
	tabvimfiler	Run |:VimFilerTab| on the directory.  This is
			available only when |vimfiler| is installed.
	rec		Run |unite-source-file_rec| on the directory.
	rec_parent	Run |unite-source-file_rec| on the parent directory.
	rec_project	Run |unite-source-file_rec| on the project directory.
	rec/async	Run |unite-source-file_rec/async| on the directory.
	rec_parent/async
			Run |unite-source-file_rec/async| on the parent
			directory.
	rec_project/async
			Run |unite-source-file_rec/async| on the project
			directory.
	file		Run |unite-source-file| on the directory.

file						*unite-action-file*
Opens a file into a new buffer.  This kind extends |unite-action-openable| and
|unite-action-cdable|.
	open		Open the file.
	preview		Open the file into the preview window.
	bookmark	Add the file into your bookmark.
	mkdir		Make the directory.  If it already exists, this action
			does nothing.
	rename		Change the file name.
	grep		Grep the files.
	grep_directory	Grep the files in the directories.
	wunix		Write by unix fileformat.
	diff		diff with the other candidate or current buffer.
	dirdiff		|:DirDiff| with the other candidate.
			(|DirDiff.vim| plugin is needed.)
	backup		Simple backup files.

buffer						*unite-action-buffer*
This kind extends |unite-action-file|.
	delete		|:bdelete| the buffer.
	fdelete		|:bdelete!| the buffer.
	wipeout		|:bwipeout| the buffer.
	unload		|:bunload| the buffer.
	bookmark	Add the candidate into your bookmark.
	rename		Change the buffer name and the file name.
	goto		Go to the buffer tab.

tab						*unite-action-tab*
This kind extends actions of |unite-action-cdable| only when |gettabvar()|
exists.
	open		Show the tab.
	delete		Close the tab.

	The following actions require |gettabvar()| and t:cwd.
	rename		Change the title of the tab.
	preview		Preview the tab.

directory					*unite-action-directory*
This kind extends actions of |unite-action-file|.  This doesn't have any
additional actions.  You may want to use this to change the default_action
when the target is a directory.

word						*unite-action-word*
This kind doesn't have any additional actions.  You may want to use this to
change the default_action when the target is a word.

jump_list					*unite-action-jump_list*
This kind extends actions of |unite-action-openable|.  Let me explain about
the additional actions defined in this.
	open		Jump to the location of the candidate.
	preview		Preview around the location of the candidate.
	highlight	highlight the location of the candidate if the
			corresponding buffer is visible.
	replace		Replace selected candidates with |qfreplace| plugin.

command						*unite-action-command*
	execute		Execute the command.
	edit		Input the command into the command line.

window						*unite-action-window*
This kind extends actions of |unite-action-cdable|.
	open		Move to the window.
	delete		Close the window.
	only		Close all windows except the window.
	preview		Preview the window.

completion					*unite-action-completion*
	insert		Insert the candidate.
	preview		Show the information of the candidate.

uri						*unite-action-uri*
	start		Open uri by a web browser.

source						*unite-action-source*
	start		Start the source.
	edit		Edit the source arguments.

Actions of each sources

file_mru					*unite-action-source-file_mru*
	delete		Delete from most recent used file candidates.

directory_mru				*unite-action-source-directory_mru*
	delete		Delete from most recent used directory candidates.

bookmark					*unite-action-source-bookmark*
	delete		Delete from bookmark file candidates.

register					*unite-action-source-register*
	edit		Change a register value.
	delete		Clear registers.

process						*unite-action-source-process*
	sigterm		Send SIGTERM to the process(default).
	sigkill		Send SIGKILL to the process.
	sigint		Send SIGINT to the process.

mapping						*unite-action-source-mapping*
	preview		View the help documentation.

command						*unite-action-source-command*
	preview		View the help documentation.

function					*unite-action-source-function*
	call		Call the function and print result.
	preview		View the help documentation.

undo						*unite-action-source-undo*
	undo		Undo changes.

						*unite-default-action*
Default actions

kind		action
{kind}		{action}
----------	----------
file		open
buffer		open
tab		open
directory	narrow
word		insert
jump_list	open
source		start

==============================================================================
CREATE SOURCE					*unite-create-source*

The files in autoload/unite/sources are automatically loaded and it
calls unite#sources#{source_name}#define() whose return value is the source.
Each return value can be a list so you can return an empty list to avoid
adding undesirable sources.  To add your own sources dynamically, you can use
|unite#define_source()|.

Note: To optimize load source files, if "buffer/rec" source name is detected,
unite.vim loads "autoload/unite/sources/buffer*.vim" or
"autoload/unite/sources/rec*.vim" files.  The source file name must have
source name prefix(Ex: buffer) or source name postfix(Ex: rec).

------------------------------------------------------------------------------
SOURCE ATTRIBUTES				*unite-source-attributes*

						*unite-source-attribute-name*
name			String		(Required)
			The name of a source.  It must consist of the
			following characters:
			- a-z
			- 0-9
			- _
			- /
			- - (Not head)

			For example:
			- "buffer" , "file_mru" and "view/git" are
			  valid.
			- "BadOne", "!@#$%^&*()_[]{}-|" and "" are
			  invalid.

				*unite-source-attribute-gather_candidates*
gather_candidates	Function	(Required)
			This function is called once in gathering candidates
			and anytime in redrawing by |<Plug>(unite_redraw)|.
			If a source is defined as |unite-source-is_volatile|,
			this function is called whenever the input string is
			changed.  This function takes {args} and {context} as
			its parameter and returns a list of {candidate}.
			Here, {args} is a list of parameters given to the
			source when |:Unite| command is executed and {context}
			is the context information when the source is called.
			If either of these are not given, the argument becomes
			"".  Hence, this function must handle empty string.
			Arguments should be checked by |get()| function.
			For more details, you can refer to
			|unite-notation-{context}| about {context} and
			|unite-notation-{candidate}| about {candidate}.
			This attribute can be omitted if other attributes can
			gather some candidates.
			The candidates gathered by this attribute are cached
			by unite buffer.  The cache is available until the
			unite buffer is closed and is discarded unless you use
			|:UniteResume|.  To cache persistently regardless of
			the life of the unite buffer, you have some source to
			save the cache on non-volatile storage.

				*unite-source-attribute-change_candidates*
change_candidates	Function	(Optional)
			This function is called if the input string is changed
			in gathering candidates by unite.  You can make use of
			this attribute to generate candidates from the input
			string.  The candidates generated by this attributes
			are added to the candidates cached by
			|unites-source-attribute-gather_candidates|.
			This function takes {args} and {context} as its
			parameter and returns a list of {candidate}.
			The specification of the parameters and the returned
			value is same as
			|unite-source-attribute-gather_candidates|.

			*unite-source-attribute-async_gather_candidates*
async_gather_candidates	Function	(Optional)
			This function is called asynchronously in gathering
			candidates.  You can make use of this function to
			split time-consuming job into small jobs.
			|g:unite_update_time| is the default timing.  This
			function takes {args} and {context} as its parameter
			and returns a list of {candidate}.

			The specification of the parameters and the returned
			value is same as
			|unite-source-attribute-gather_candidates|.

					*unite-source-attribute-complete*
complete		Function	(Optional)
			This functions is called to complete the source
			argument of |:Unite|.  This function takes {args},
			{context}, {arglead}, {cmdline} and {cursorpos} as its
			parameter and returns a list of candidates.

						*unite-source-attribute-hooks*
hooks			Dictionary		(Optional)
			You may put hook functions in this dictionary in which
			the key is the position to hook and the value is the
			reference to the function to be called.  The following
			hook functions are defined:

			on_init		*unite-source-attribute-hooks-on_init*
			Called just before returning to unite buffer after
			executing |:Unite| commands or calling |unite#start()|
			but executing |:UniteResume|.
			This function takes {args} and {context} as its
			parameters.
			Note that you must be careful to select the function
			to call because the unite buffer is not still
			initialized in calling this hook function.

			on_syntax
				*unite-source-attribute-hooks-on_syntax*
			Called after the unite buffer is initialized and
			syntax for each source is set but not called if
			|unite-source-attribute-syntax| is not set.
			This function takes {args} and {context} as its
			parameters.
			Highlight configuration for each source is done by
			this function.

			Note: To get abbr head column, use
			"unite#get_current_unite().abbr_head".
			Example:
>
			syntax match uniteSource_FileMru_Time /(.*)/ contained containedin=uniteSource_FileMru
			highlight default link uniteSource_FileMru_Time Statement
<
			Note you must set the contained in of the same syntax
			name as for |unite-source-attribute-syntax|.

			on_close
				*unite-source-attribute-hooks-on_close*
			Called after executing |<Plug>(unite_exit)| or closing
			the unite buffer following some command execution.
			This function takes {args} and {context} as its
			parameters.

			on_pre_filter
				*unite-source-attribute-hooks-on_pre_filter*
			Called before the filters to narrow down the
			candidates.  This function takes {args} and {context}
			as its parameters.

			on_post_filter
				*unite-source-attribute-hooks-on_post_filter*
			Called after the filters to narrow down the
			candidates.  This is used to set attributes.
			These filters are to avoid adversely affecting the
			performance.  This function takes {args} and {context}
			as its parameters.

			on_pre_init
				*unite-source-attribute-hooks-on_pre_init*
			Called before source is initialized.
			{args} is empty.
			Current source is set as "a:context.source" in
			{context}.
			You can dynamically initialize source by changing
			"a:context.source" in this function.

					*unite-source-attribute-action_table*
action_table		Dictionary		(Optional)
			Adds source's own action table.
			In this dictionary, the key is the kind and the value
			is the action table.  The specification of action
			table is same as |unite-kind-attribute-action_table|.
			With this dictionary, you can define original
			|unite-kind-attribute-action_table| for each kind in
			source's own context.
			For example:
>
			'action_table' : { 'buffer' : foo_action_table }
<
			means that foo_action_table is used for kind "buffer"
			in this source's context.
			You can use "*" for the key to match any kind.
			This is useful if you expect only one kind.  If no
			key-value pair is set, this dictionary is left empty.
			You can put action table without a corresponding key
			and it means the key is "*".
			For example, the following two are the same.
>
			'action_table' : foo_action_table
			'action_table' : { '*' : foo_action_table }
<
				*unite-source-attribute-default_action*
default_action		Dictionary		(Optional)
			Adds default action unique to the source.
			In this dictionary, the key is the kind and the value
			is the default action.
			If it's not given, the kind's default action is used.
			The default action can be in string format and
			it means the same as:
>
			'default_action' : { '*' : action_name}.
<
					*unite-source-attribute-default_kind*
default_kind		String			(Optional)
			Default kind in source candidates.
			If it's not given, the "common" is used.

					*unite-source-attribute-alias_table*
alias_table		Dictionary		(Optional)
			Adds an alias table unique to the source.
			In this dictionary, the key is the kind and the value
			is the alias table.
			If the key is '*', it matches any kinds.
			Please refer to |unite-kind-attribute-action_table|
			for the specification of alias table.
			If no key-value is set, this dictionary is left
			empty.

					*unite-source-attribute-max_candidates*
max_candidates		Number		(Optional)
			The maximum number of candidates.

			This attribute is optional; if it is not given,
			0 is used as the default value.  This means
			maximum number is infinity.

			*unite-source-attribute-required_pattern_length*
required_pattern_length	Number		(Optional)
			The least string length to narrow down the candidates.
			This attribute is optional.
			If it's not given, 0 is used as the default value and
			all the possible candidates are collected.

					*unite-source-attribute-is_volatile*
is_volatile		Number		(Optional)
			Whether the source recalculates the candidates
			everytime the input is changed.
			This attribute is optional.
			If it's not given, 0 is set as the default value.  In
			this case, candidates are cached in unite buffer and
			it does not call
			|unite-source-attribute-gather_candidates|
			repeatedly and the cache is available until the unite
			buffer is closed.  To cache longer, the source has no
			choice but to cache by itself.

					*unite-source-attribute-is_listed*
is_listed		Number		(Optional)
			Whether the source name is visible to the user.
			If the source is internal, it must be set to 0.  If
			it's omitted, it's set to 1.

					*unite-source-attribute-description*
description		String		(Optional)
			The description of the source.
			If it's omitted, it's set to "".
			|unite-source-source| uses this.

					*unite-source-attribute-syntax*
syntax			String		(Optional)
			The syntax name used within the source.  This syntax
			name is defined automatically by unite itself.
			If it's omitted, it's set to "".
			This is used to configure the source's own highlight.
			According to the unite's naming conversion to avoid
			the syntax name conflicted, use syntax name like
			"uniteSource__(source name)".  Configuration of
			highlight itself must use
			|unite-source-attribute-hooks-on_syntax|.

					*unite-source-attribute-filters*
filters			List		(Optional)
			The list of filters used by the source.  The elements
			are filter name or function reference (accepted
			dictionary function in current source).  Please refer
			to |unite-filter-attributes| for the specification of
			filter.  If it's omitted, unite uses
			|unite-filter-default|.
					*unite-source-attribute-matchers*
matchers		List/String	(Optional)
			The list of matchers used by the source.
					*unite-source-attribute-sorters*
filters			List/String	(Optional)
			The list of sorters used by the source.
					*unite-source-attribute-converters*
converters		List/String	(Optional)
			The list of converters used by the source.

					*unite-source-attribute-source__*
source__		Unknown		(Optional)
			The Attribute unique for each source.  To avoid the
			attribute from conflicting with the unite's own,
			"source__" prefix must be added.

NOTATION					*unite-notation*

{context}					*unite-notation-{context}*
			A dictionary to give context information.
			The followings are the primary information.
			The global context information can be acquired by
			|unite#get_context()|.
			The context information is characteristic to each
			source and you can distinguish one by a key stored in
			the dictionary.

			input			(String)
				The input string of unite buffer.

			buffer_name		(String)
				The name of unite buffer.

			profile_name		(String)
				The profile name of unite buffer.

			prompt			(String)
				The prompt string of unite buffer.

			is_insert		(Number)
				If unite buffer is loaded from
				insert mode.

			immediately		(Number)
				If unite buffer is loaded from
				|unite-options-immediately|.

			is_redraw		(Number)
				If a user pressed |<Plug>(unite_redraw)| or
				invalidated cache after executed actions.
				Note: A user uses |<Plug>(unite_redraw)|
				mapping to remove cache files.

			is_invalidate		(Number)
				If An action disables a cache.  This is also 1
				in initialization of unite buffer.

			is_async		(Number)
				If the source gathers candidates
				asynchronously.
				If it's set to 0 in a source, it disables
				asynchronous.

			source			(Dictionary)
				Gathering candidates source information.

			candidates		(List)
				Filtered candidates.
				Note: This key is valid only in
				|unite-source-attribute-hooks-on_post_filter|.

			source__{name}		(Unknown)	(Optional)
				Additional source information.
				Note: Recommend sources save variables instead
				of s: variables.

{candidate}					*unite-notation-{candidate}*
			A dictionary for candidates.
			The followings are the primary information.

			word			(String)	(Required)
				String Displayed in unite buffer.
				Matcher to use word attribute to filter.

			abbr			(String)	(Optional)
				String Displayed in unite buffer.
				If it is omit, word attribute is used instead.
				The attribute is not used for matcher.

			source			(String)	(Optional)
				Generated candidate source name.
				Note: This attribute is set automatically.

			kind			(String/List)	(Optional)
				The candidate kind name.
				If it is omit, "common" is used.
				Kind name list is acceptable.
				Ex: ["file", "directory"]
				If you use list, you have not to define
				parents kind action.
				Note: Unite searches kinds action from list
				tail.
				Ex: If you set kind attribute to ["file",
				"command"], "file" (default) actions will be
				overwritten by "command" action.  You should
				use source default action instead of kind.

			is_dummy		(Number)	(Optional)
				If the candidate is dummy.
				The default value is 0.
				Note: When the cursor moves, dummy candidates
				are skipped.

			is_matched		(Number)	(Optional)
				If the candidate is filtered.

			is_multiline		(Number)	(Optional)
				If the candidates have multiple lines.
				The default value is 0.  When this is enabled,
				unite splits abbr (or word if abbr is missing)
				by a newline character.

			source__{name}		(Unknown)	(Optional)
				Attributes added by sources.

			action__{name}		(Unknown)	(Optional)
				Attributes added by actions.
				For example, "action__path" attribute is file
				path.  If you learn standard action
				attributes, please refer to |unite-kind|.

==============================================================================
CREATE KIND					*unite-create-kind*

The files in autoload/unite/kinds are automatically loaded and it calls
unite#kinds#{kind_name}#define() whose return value is the kind.  Each return
value can be a list so you can return an empty list to avoid adding
undesirable kinds.  To add your own kinds dynamically, you can use
|unite#define_kind()|.

Note: To optimize load kind files, if "foo" kind name is detected, unite.vim
loads "autoload/unite/kinds/foo*.vim" files.  The kind file name must be kind
name prefix(Ex: foo).

------------------------------------------------------------------------------
KIND ATTRIBUTES					*unite-kind-attributes*

						*unite-kind-attribute-name*
name			String		(Required)
			The name of a kind.  It must consist of the
			following characters:
			- a-z
			- 0-9
			- _
			- /
			- - (Not head)

			For example:
			- "buffer" , "file_mru" and "view/git" are valid.
			- "BadOne", "!@#$%^&*()_[]{}-|" and "" are invalid.

					*unite-kind-attribute-default_action*
default_action		String		(Required)
			Specify default action name when executing
			|<Plug>(unite_do_default_action)|.  If this attribute
			is omitted, an error occurred.  But this hack is used
			in parent only actions.

					*unite-kind-attribute-action_table*
action_table		Dictionary		(Required)
			Adds an action table unique to the kind.  In this
			dictionary, the key is the action name and the value
			is one of dictionary attributes below.
			If the value is "nop", the actions are disabled.
			Note: "default" and "nop" names are keyword.  You
			cannot use them.
			Note: If name is "unite__new_candidate", it will be
			used for |<Plug>(unite_new_candidate)|.  It adds a
			candidate in current source.

			func			(Function)
				This function is called when executing
				actions.  This function takes {candidate}.
				If "is_selectable" attribute is "1",
				{candidate} are candidate list({candidates}).
				Note: This {candidate} is cached by unite, so
				you cannot modify it.  If you modify it, you
				must use |deepcopy()|.

			description		(String)	(Optional)
				The kind description string.

			is_quit			(Number)	(Optional)
				If this attribute is "1", unite buffer is
				closed before executing actions.  If this
				attribute is omitted, "1" is used.

			is_selectable		(Number)	(Optional)
				If this attribute is "1", the action can
				execute multiple candidates.  If this
				attribute is omitted, "0" is used.

			is_invalidate_cache	(Number)	(Optional)
				If this attribute is "1", unite invalidates
				source cache when executing the action.  If
				this attribute is omitted, "0" is used.

			is_listed		(Number)	(Optional)
				If this attribute is "1", the action is listed
				in |<Plug>(unite_choose_action)|.  If this
				attribute is omitted, "1" is used.

			is_start		(Number)	(Optional)
				If this attribute is "1", the action start
				unite sources.  If this attribute is omitted,
				"0" is used.

					*unite-kind-attribute-alias_table*
alias_table		Dictionary		(Optional)
			Adds an alias table unique to the kind.  In this
			dictionary, the key is the action name and the value
			is the overwrite action name.
			If the value is "nop", the action is disabled.

						*unite-kind-attribute-parents*
parents			List		(Optional)
			Specify parent list.  If this attribute is omitted,
			["common"] is used.
			Unite searches actions from list tail(head actions are
			overwritten).
			Note: Unite searches actions from parent list
			recursively.  You must check infinity loop.

------------------------------------------------------------------------------
IMPLICIT KIND				*unite-implicit-kind-for-a-source*

Unite can define actions in implicit kind.  The implicit kind name is
"source/{name}/{kind}".  The {name} is source name.  If the {kind} is "*", it
matches any kinds.

For example, if you want to add "delete" action in source "file", execute
below command.
>
	call unite#custom#action('source/file/*', 'delete', function('...'))
<
------------------------------------------------------------------------------
ACTION RESOLUTION ORDER				*unite-action-resolution-order*

For example, if you fire actions from kind "file" candidate gathered by source
"file", unite searches actions by order below.
Note: kind "file" extends "openable" and "cdable" kind.

(1) Custom action table for kind "source/file/file".
(2) Default action table for kind "source/file/file".
(3) Custom action table for kind "source/file/*".
(4) Default action table for kind "source/file/*".
(5) Custom action table for kind "file".
(6) Default action table for kind "file".
(7) Custom action table for kind "cdable".
(8) Default action table for kind "cdable".
(9) Custom action table for kind "openable".
(10) Default action table for kind "openable".
(11) Custom action table for kind "common".
(12) Default action table for kind "common".

==============================================================================
CREATE FILTER					*unite-create-filter*

The files in autoload/unite/filters are automatically loaded and it calls
unite#filters#{filter_name}#define() whose return value is the filter.  Each
return value can be a list so you can return an empty list to avoid adding
undesirable filter.  To add your own filters dynamically, you can use
|unite#define_filter()|.

Note: To optimize load filter files, if "matcher_foo_bar" filter name is
detected, unite.vim loads "autoload/unite/filters/matcher_foo*.vim" files.
The filter file name must be filter name prefix(Ex: matcher_foo).

------------------------------------------------------------------------------
FILTER ATTRIBUTES				*unite-filter-attributes*

						*unite-filter-attribute-name*
name			String		(Required)
			The filter name.

						*unite-filter-attribute-filter*
filter			Function		(Required)
			This function is called after gathering candidates by
			unite.
			This function takes {candidates} and {context} as its
			parameter and returns a list of {candidate}.
			The specification of the parameters and the returned
			value is same as
			|unite-source-attribute-gather_candidates|.

					*unite-filter-attribute-description*
description		String		(Optional)
			The filter description string.

==============================================================================
EXTERNAL SOURCES				*unite-external-sources*

tag source :

https://github.com/tsukkee/unite-tag

Quick Fix source :

https://github.com/osyo-manga/unite-quickfix

Outline source :

https://github.com/Shougo/unite-outline (newer)
https://github.com/h1mesuke/unite-outline (original)

Help source :

https://github.com/Shougo/unite-help (newer/vimproc required)
https://github.com/tsukkee/unite-help (original)

And so on...

See Wiki page(Japanese).
https://github.com/Shougo/unite.vim/wiki/unite-plugins

==============================================================================
FAQ						*unite-faq*

Q: I want to delete files in unite buffer.

A: You can use below setting.  But this setting is dangerous.  You may delete
files by mistake.
>
	call unite#custom#alias('file', 'delete', 'vimfiler__delete')
<
Q: I want to input register values in insert mode.

A: You can use below mappings.
>
	inoremap <silent><expr> <C-z>
	\ unite#start_complete('register', { 'input': unite#get_cur_text() })
<
Q: Unite.vim breaks Window layout after quitting unite buffer.

A: You MUST NOT |:quit| or |:close| to quit unite buffer.
You must use |<Plug>(unite_exit)| or |<Plug>(unite_all_exit)|.

Q: I want to exit unite buffer after narrowing action in directory.

A: You should use |<Plug>(unite_all_exit)| instead of |<Plug>(unite_exit)|.

Q: How to make direct action (or choose action menu) to current file or given
path?

A:
>
	call unite#do_candidates_action('some_action',
	\  unite#get_candidates([['file', expand('%')]]))
<
Q: unite.vim statusline conflicts with powerline.
https://github.com/Lokaltog/powerline
https://github.com/Lokaltog/vim-powerline (deprecated)

A: You must set |g:unite_force_overwrite_statusline| to 0.
>
	let g:unite_force_overwrite_statusline = 0
<

And you must install below custom theme for powerline.

For powerline:

1. vim powerline local themes
https://github.com/zhaocai/linepower.vim

2. or checkout the powerline branch from @zhaocai with custom theme for
   unite.vim included edition
https://github.com/zhaocai/powerline

https://github.com/Lokaltog/powerline/issues/470 (pull request)


For vim-powerline:
Note: The description is Japanese
http://d.hatena.ne.jp/osyo-manga/20130429/1367235332
https://github.com/osyo-manga/vim-powerline-unite-theme

Q: I want to match candidates by filename.

A:
>
  call unite#custom#source(
        \ 'buffer,file_rec/async,file_rec,file_mru', 'matchers',
        \ ['converter_tail', 'matcher_default'])
  call unite#custom#source(
        \ 'file_rec/async,file_rec,file_mru', 'converters',
        \ ['converter_file_directory'])
<

Q: I want to use fuzzy match.

A: You can use |unite-filter-matcher_fuzzy|.
>
		call unite#custom#source('file,file/new,buffer,file_rec',
		\ 'matchers', 'matcher_fuzzy')
<
Q: I want to clear cache in candidates.

A: Please use |<Plug>(unite_redraw)|.

Q: I want to narrow automatically when other candidates are selected in insert
mode like ctrlp.vim.

A: This feature is already implemented.
Note: It requires Vim 7.3.418 or above.

Q: I want to run "split" action in insert mode by "<C-s>".

A:

	autocmd FileType unite call s:unite_my_settings()
	function! s:unite_my_settings()
	  " Overwrite settings.
	  imap <silent><buffer><expr> <C-s>     unite#do_action('split')
	endfunction

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:
